{"version":3,"sources":["worker.js","data/investments.js","components/form/Select.js","components/form/Banned.js","components/form/Mandatory.js","components/form/Extra.js","first-round/Form.js","misc.js","results/Ledger.js","results/Addition.js","data/givini.js","first-round/results/Givini.js","data/takkan.js","first-round/results/Takkan.js","data/chalice.js","first-round/results/Chalice.js","first-round/results/index.js","results/ScrollTo.js","first-round/index.js","Disclaimer.js","Loading.js","Failure.js","second-round/Headquarters.js","second-round/Form.js","second-round/results/Givini.js","second-round/results/Takkan.js","second-round/results/Chalice.js","second-round/results/index.js","second-round/index.js","third-round/Form.js","third-round/Result.js","third-round/index.js","App.js","reportWebVitals.js","index.js"],"names":["addMethods","methods","module","exports","w","Worker","name","investments","price","profits","chapter1x2Tower","social","givini","chalice","chapter3Infrastructure","chapter1Steel","chapter1Bank","gawnfallMother","chapter3Armorer","takkan","lustlordStatuesBought","giviniStart","newGiviniScore","previousInvestments","includes","giviniExtra","reduce","acc","investment","gawnfallTakkan","guildScore","chapter3Tradesmasher","map","filter","length","eustrinEmbassy","Infinity","ardfordOpen","gawnfallArdford","ifArdfordOpen","params","postGawnfallInvestments","CustomSelect","key","label","tooltip","purchased","form","list","useEffect","setFieldsValue","getFieldValue","inv","Item","options","sort","a","b","localeCompare","value","mode","Banned","Select","Mandatory","Extra","Title","Typography","possiblePrevious","initialValues","previous","remainingPron","baseProfit","strategy","startingSocial","merchantSolution","jhenno","magicalItems","mandatory","research","banned","spending","trades","requiredRule","required","message","CustomForm","onFinish","loading","Form","useForm","useState","setPrevious","setMandatory","setStrategy","onValuesChange","_","allValues","className","level","rules","valuePropName","title","type","htmlType","buildFinalStandings","initialStandings","investmentChanges","nonInvestmentChanges","finalStandings","forEach","money","nF","number","toLocaleString","numberColWidth","NumberCell","children","formattedNumber","format","Math","abs","Investments","dataSource","data","columns","dataIndex","sorter","render","width","pagination","Others","Ledger","sum","extraProfits","category","otherList","bordered","expandable","expandedRowRender","rowExpandable","defaultExpandAllRows","summary","Summary","Row","Cell","colSpan","Addition","startingValue","dataSources","index","scope","values","explanation","join","toString","val","preliminaryChanges","Boolean","baseValue","chapter3Investments","roundOneChanges","roundOneValue","roundTwoChanges","merchantSolution2","roundTwoValue","roundThreeChanges","merchantSolution3","gawnfallMercantile","roundThreeValue","Givini","roundOneInvestments","decisions","Takkan","initialInvestments","Chalice","Result","ScrollTo","resultRef","useRef","current","scrollIntoView","behavior","ref","shadowBans","socialRequirement","buildNonInvestmentsChange","nonInvestmentChangesList","giviniRoundOneValue","takkanRoundOneValue","chaliceRoundOneValue","compute","runInWoker","misc","otherRequirements","atLeastOne","undefined","setResult","setError","giviniBaseValue","takkanBaseValue","chaliceBaseValue","result","FirstRound","Disclaimer","href","description","showIcon","closable","Loading","combinationsCount","progress","investmentsCount","preprogress","abort","visible","centered","footer","percent","round","danger","icon","PoweroffOutlined","onClick","Failure","status","base","magic","military","defense","subsitute","plusTenMilitary","plusFifteenMilitary","renderPlus","Error","Headquarters","source","headquarters","orcCouncil","firstRoundDecisions","purchasedInvestments","hq","setHq","split","x","parseInt","previousResearch","headquartersPrice","roundTwoInvestments","Text","roundOneResearch","takkanScore","councilResult","researches","yes","no","council","toFixed","roundOneDecisions","initialSocial","firstRoundResult","headquartersUpgradesPrice","pronNote","giviniRoundTwoValue","takkanRoundTwoValue","chaliceRoundTwoValue","completedResearch","SecondRound","mandatory1","yelarel","vera","gawnfallHigh","reserves","extra_reserves","WarInvestments","frontName","missing","GhenaleseWarInvestments","ErosianWarInvestments","setMandatory1","lockedInvestments","setLockedInvestments","availableResearch","Group","preGawnfallInvestments","filterInvestmentsByCountry","country","giviniRoundThreeChanges","takkanRoundThreeChanges","chaliceRoundThreeChanges","gawnfallSocial","preInvestmentsOrii","preInvestmentsTradesmasher","pastInvestmentsUpdate","total","tradesmasherProfits","investmentsList","find","projectedPastInvestmentsUpdate","secondRoundResult","mandatory2","earlyArchives","earlyHousing","push","mercantileMoney","giviniRoundThreeValue","takkanRoundThreeValue","chaliceRoundThreeValue","reserve","max","allInvestments","ThirdRound","dumbCache","dumbKey","JSON","stringify","App","workerInstance","setWorkerInstance","setLoading","setCombinationsCount","setProgress","setInvestmentsCount","setPreprogress","setFirstRoundResult","setSecondRoundResult","thirdRoundResult","setThirdRoundResult","error","worker","terminate","cacheKey","prepare","i","preprocess","batchSize","ceil","end","min","process","clean","buildRunInWorker","newWorkerInstance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a649c031.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"prepare\",\"preprocess\",\"process\",\"clean\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"d18ce99d0e1a1965417e.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","// Ref: https://thelastsovereign.miraheze.org/wiki/Investments\n\nconst investments = [\n  {\n    name: 'Bank of Stineford',\n    price: 400000,\n    profits: 240000,\n  },\n  {\n    name: 'Stineford Weapons Store',\n    price: 200000,\n    profits: 75000,\n  },\n  {\n    name: 'Trading Pillar Rights',\n    price: 300000,\n    profits: 100000,\n  },\n  {\n    name: 'Stineford Succubus Tower',\n    price: ({ chapter1x2Tower }) => {\n      if (chapter1x2Tower) {\n        return 800000;\n      }\n      return 1000000;\n    },\n    social: 2,\n  },\n  {\n    name: 'Yhilini Airship Fleet',\n    price: 1000000,\n    profits: 100000,\n  },\n  {\n    name: \"Min's Trade Route\",\n    price: 400000,\n    profits: 185000,\n    givini: 1,\n    chalice: 1,\n  },\n  {\n    name: 'Yhilini Succubi Trade',\n    price: ({ chapter3Infrastructure }) =>\n      chapter3Infrastructure ? 400000 : 550000,\n    profits: 200000,\n    chalice: 2,\n  },\n  {\n    name: 'Yhilini Brothel Reform',\n    price: 25000,\n    profits: 35000,\n  },\n  {\n    name: 'Premium Steel Owner',\n    price: ({ chapter1Steel }) => (!!chapter1Steel ? 75000 : 100000),\n    profits: 10000,\n  },\n  {\n    name: 'Yhilini Bank Core Lender',\n    price: ({ chapter1Bank }) => {\n      if (chapter1Bank) {\n        return 450000;\n      }\n      return 500000;\n    },\n    profits: 150000,\n  },\n  {\n    name: 'Mercenary Offices',\n    price: ({ chapter3Infrastructure }) =>\n      chapter3Infrastructure ? 150000 : 250000,\n    profits: 15000,\n    social: 2,\n  },\n  {\n    name: 'Theltiar Rentals',\n    price: 425000,\n    profits: 95000,\n    social: 1,\n  },\n  {\n    name: 'Theltiar Flowhouse',\n    price: 250000,\n    profits: 80000,\n  },\n  {\n    name: 'Denmiel Mushrooms',\n    price: 105000,\n    profits: 40000,\n  },\n  {\n    name: 'Denmiel Archives',\n    price: ({ gawnfallMother }) => {\n      if (gawnfallMother === 'full_unlock') {\n        return 150000;\n      }\n      return 250000;\n    },\n    profits: 20000,\n    social: 1,\n  },\n  {\n    name: 'Eustrin Guild',\n    price: 600000,\n    profits: 250000,\n  },\n  {\n    name: 'Succubus Armorer',\n    price: ({ chapter3Armorer }) => {\n      if (chapter3Armorer) {\n        return 100000;\n      }\n      return 150000;\n    },\n    profits: 10000,\n    chalice: 2,\n  },\n  {\n    name: 'Gasm Falls Trade',\n    price: 275000,\n    profits: 110000,\n    chalice: 2,\n  },\n  {\n    name: 'Givini Tunnels',\n    price: 1500000,\n    profits: 300000,\n    givini: 3,\n    takkan: 3,\n    chalice: 3,\n  },\n  {\n    name: 'Lustlord Temples',\n    price: ({ lustlordStatuesBought }) => {\n      if (lustlordStatuesBought) {\n        return 750000;\n      }\n      return 50000 + 750000;\n    },\n    profits: 50000,\n    chalice: ({ lustlordStatuesBought }) => {\n      if (lustlordStatuesBought) {\n        return 5;\n      }\n      return 2 + 5;\n    },\n  },\n  {\n    name: 'Succubus Band Tour',\n    price: 100000,\n    profits: 2000,\n    givini: 2,\n    social: 1,\n    takkan: 2,\n  },\n  {\n    name: 'Gasm Falls Water Cleanup',\n    price: 250000,\n    social: 1,\n    chalice: 5,\n  },\n  {\n    name: 'Gasm Falls Orc Tunnels',\n    price: 200000,\n    social: 1,\n    chalice: 5,\n  },\n  {\n    name: 'Givini Smithing',\n    price: 200000,\n    profits: 10000,\n    givini: 2,\n  },\n  {\n    name: 'Givini Orc Merchant',\n    price: ({ giviniStart: newGiviniScore = 0, previousInvestments = [] }) => {\n      if (!previousInvestments.includes('New Givini Trade')) {\n        if (newGiviniScore < 10) {\n          return 100000;\n        }\n        if (newGiviniScore < 15) {\n          return 200000;\n        }\n        if (newGiviniScore < 25) {\n          return 300000;\n        }\n        if (newGiviniScore < 35) {\n          return 400000;\n        }\n        return 500000;\n      }\n\n      if (newGiviniScore < 20) {\n        return 100000;\n      }\n      if (newGiviniScore < 25) {\n        return 200000;\n      }\n      if (newGiviniScore < 35) {\n        return 300000;\n      }\n      if (newGiviniScore < 45) {\n        return 400000;\n      }\n      return 500000;\n    },\n    profits: ({ giviniStart = 0, giviniExtra = 0, investments }) => {\n      const newGiviniScore =\n        giviniStart +\n        giviniExtra +\n        investments.reduce((acc, investment) => {\n          return acc + (investment?.givini || 0);\n        }, 0);\n      if (newGiviniScore < 20) {\n        return 25000;\n      }\n      if (newGiviniScore < 30) {\n        return 50000;\n      }\n      if (newGiviniScore < 40) {\n        return 100000;\n      }\n      if (newGiviniScore < 50) {\n        return 150000;\n      }\n      return 200000;\n    },\n    givini: 5,\n  },\n  {\n    name: 'Givini Teahouse Chain',\n    price: 275000,\n    profits: 30000,\n    givini: 2,\n    social: 1,\n    takkan: 1,\n    chalice: 1,\n  },\n  {\n    name: 'Bank of Givini',\n    price: 350000,\n    profits: 300000,\n    givini: 5,\n    takkan: 2,\n    chalice: 2,\n  },\n  {\n    name: 'Givini Mage Guild',\n    price: 1000000,\n    profits: 40000,\n    givini: 5,\n  },\n  {\n    name: 'War Monument',\n    price: 1000000,\n    givini: 10,\n    social: 3,\n    takkan: 2,\n    chalice: 2,\n  },\n  {\n    name: \"Tarran'Kan Housing + Tarran'Kan Trade Upgrade\",\n    price: ({ gawnfallTakkan }) => {\n      if (gawnfallTakkan === 'major') {\n        return 750000 + 100000;\n      }\n      if (gawnfallTakkan === 'minor') {\n        return 900000 + 100000;\n      }\n      return 1000000 + 100000;\n    },\n    profits: 50000 + 50000,\n    social: 1,\n    takkan: 5 + 2,\n  },\n  {\n    name: 'Hall of Mental Strength',\n    price: 200000,\n    profits: 25000,\n    social: 1,\n    takkan: 3,\n  },\n  {\n    name: 'Booze Shack',\n    price: 150000,\n    profits: 50000,\n    social: 1,\n    takkan: 2,\n  },\n  {\n    name: \"Tradesmasher's Guild\",\n    price: 350000,\n    profits: ({\n      investments = [],\n      previousInvestments = [],\n      gawnfallTakkan,\n      chapter3Tradesmasher,\n    }) => {\n      const guildScore =\n        (chapter3Tradesmasher ? 1 : 0) +\n        [...previousInvestments, ...investments.map(({ name }) => name)].filter(\n          (name) => {\n            return [\n              \"Cee'Kan Shipping\",\n              'Lonely Sailor Services',\n              'Givini Orc Merchant',\n              'Orcish Democracy',\n              'Orc Pools Upgrade',\n            ].includes(name);\n          }\n        ).length +\n        (gawnfallTakkan === 'major' ? 1 : 0);\n\n      if (guildScore < 1) {\n        return 25000;\n      }\n      if (guildScore === 1) {\n        return 50000;\n      }\n      if (guildScore === 2) {\n        return 75000;\n      }\n      if (guildScore === 3) {\n        return 125000;\n      }\n      if (guildScore === 4) {\n        return 150000;\n      }\n      if (guildScore === 5) {\n        return 175000;\n      }\n      return 200000;\n    },\n    takkan: 5,\n  },\n  {\n    name: 'Lonely Sailor Services',\n    price: 250000,\n    profits: 100000,\n    social: 1,\n    takkan: 5,\n  },\n  {\n    name: \"Cee'Kan Shipping\",\n    price: 700000,\n    profits: 200000,\n    takkan: 5,\n  },\n  {\n    name: 'Orcish Democracy',\n    price: 1000000,\n    social: 5,\n    takkan: 10,\n  },\n  {\n    name: 'Imp Offices',\n    price: 100000,\n    social: 1,\n    takkan: 1,\n  },\n  {\n    name: 'Orc Pools Upgrade',\n    price: 500000,\n    social: 2,\n    takkan: 5,\n  },\n  {\n    name: 'Givini Banners + Givini Dragon Statue',\n    price: 1000 + 2500,\n    givini: 1,\n  },\n  {\n    name: 'Orcish Drake Statue + Orcish Gargoyle Statue + Orcish Golden Drake Statue',\n    price: 1000 + 2000 + 5000,\n    takkan: 1,\n  },\n  {\n    name: 'Aram Eustrin Embassy',\n    price: ({ eustrinEmbassy }) => {\n      return eustrinEmbassy || Infinity;\n    },\n  },\n];\n\nconst ardfordOpen = ({ gawnfallArdford }) => {\n  return gawnfallArdford === 'resolved' || gawnfallArdford === 'overkill';\n};\n\nconst ifArdfordOpen = (price) => {\n  return (params) => (ardfordOpen(params) && price) || Infinity;\n};\n\nexport const postGawnfallInvestments = [\n  ...investments,\n  {\n    name: \"Tak'Kan Mine\",\n    price: ({ gawnfallTakkan }) => {\n      if (gawnfallTakkan === 'major') {\n        return 250000;\n      }\n      if (gawnfallTakkan === 'minor') {\n        return 500000;\n      }\n      return Infinity;\n    },\n    profits: 125000,\n    social: 1,\n    takkan: 5,\n  },\n  {\n    name: 'Ivalan Bank',\n    price: ifArdfordOpen(550000),\n    profits: 225000,\n  },\n  {\n    name: 'Mercenary Flotilla',\n    price: ifArdfordOpen(500000),\n    profits: 25000,\n  },\n  {\n    name: 'Sanitation Mages Guild',\n    price: ifArdfordOpen(100000),\n    profits: 5000,\n  },\n  {\n    name: 'Crystal Refiner',\n    price: ifArdfordOpen(400000),\n    profits: 55000,\n  },\n  {\n    name: 'Ardford Restaurant',\n    price: ifArdfordOpen(100000),\n    profits: (params) => {\n      const { investments, previousInvestments = [] } = params;\n      if (\n        ardfordOpen(params) &&\n        [\n          ...previousInvestments,\n          ...investments.map(({ name }) => name),\n        ].includes('Givini Teahouse Chain')\n      ) {\n        return 25000;\n      }\n      return 10000;\n    },\n  },\n];\n\nexport const getInvestments = (key) => {\n  if (key === 'gawnfall') {\n    return postGawnfallInvestments;\n  }\n  return investments;\n};\n\nexport default investments;\n","import { Form, Select } from 'antd';\nimport { getInvestments } from '../../data/investments';\nimport { useEffect } from 'react';\n\nconst CustomSelect = ({ name, label, tooltip, purchased, form, list }) => {\n  useEffect(() => {\n    form.setFieldsValue({\n      [name]: form\n        .getFieldValue(name)\n        .filter((inv) => !purchased.includes(inv)),\n    });\n  }, [form, purchased, name]);\n\n  return (\n    <Form.Item label={label} name={name} tooltip={tooltip}>\n      <Select\n        options={getInvestments(list)\n          .filter(({ name }) => !purchased.includes(name))\n          .sort(({ name: a }, { name: b }) => a.localeCompare(b))\n          .map(({ name }) => {\n            return {\n              label: name,\n              value: name,\n            };\n          })}\n        mode=\"multiple\"\n      />\n    </Form.Item>\n  );\n};\n\nexport default CustomSelect;\n","import Select from './Select';\n\nconst Banned = ({ purchased, form, list, tooltip }) => {\n  return (\n    <Select\n      form={form}\n      purchased={purchased}\n      label={`Investments you explicitly refuse to buy, for any reason`}\n      name=\"banned\"\n      tooltip={tooltip}\n      list={list}\n    />\n  );\n};\n\nexport default Banned;\n","import Select from './Select';\n\nconst Mandatory = ({ form, purchased, tooltip, label, list }) => {\n  return (\n    <Select\n      name=\"mandatory\"\n      form={form}\n      purchased={purchased}\n      label={label || `Investments you explicitly want to buy, for any reason`}\n      tooltip={tooltip}\n      list={list}\n    />\n  );\n};\n\nexport default Mandatory;\n","import { Form, InputNumber } from 'antd';\n\nconst Extra = ({ tooltip }) => {\n  return (\n    <Form.Item label={`Other spending`} name=\"spending\" tooltip={tooltip}>\n      <InputNumber />\n    </Form.Item>\n  );\n};\n\nexport default Extra;\n","import {\n  Form,\n  Select,\n  InputNumber,\n  Button,\n  Card,\n  Checkbox,\n  Typography,\n  Divider,\n} from 'antd';\nimport { useEffect, useState } from 'react';\nimport Banned from '../components/form/Banned';\nimport Mandatory from '../components/form/Mandatory';\nimport Extra from '../components/form/Extra';\n\nconst { Title } = Typography;\n\nconst possiblePrevious = [\n  'New Givini Trade',\n  \"Tak'Kan Trade\",\n  'Chalice States Trade',\n  \"Min's Trade Route\",\n  'Yhilini Succubi Trade',\n  'Yhilini Bank Core Lender',\n  'Mercenary Offices',\n  'Theltiar Rentals',\n  'Theltiar Flowhouse',\n  'Denmiel Mushrooms',\n  'Denmiel Archives',\n  'Eustrin Guild',\n  'Gasm Falls Trade',\n  'Premium Steel Owner',\n  'Ivalan Bank',\n  'Mercenary Flotilla',\n  'Sanitation Mages Guild',\n  'Crystal Refiner',\n  'Ardford Restaurant',\n];\n\nconst initialValues = {\n  previous: [\n    'Premium Steel Owner',\n    'New Givini Trade',\n    \"Tak'Kan Trade\",\n    'Chalice States Trade',\n    \"Min's Trade Route\",\n    'Yhilini Succubi Trade',\n    'Eustrin Guild',\n    'Denmiel Mushrooms',\n    'Ivalan Bank',\n    'Crystal Refiner',\n    'Ardford Restaurant',\n  ],\n  remainingPron: 7500,\n  baseProfit: 2435000,\n  chapter1Steel: false,\n  strategy: 'compromise',\n  startingSocial: 34,\n  chapter3Infrastructure: true,\n  merchantSolution: 'wait',\n  jhenno: 'religion',\n  magicalItems: 'givini',\n  mandatory: ['Givini Orc Merchant', 'Bank of Givini', 'Bank of Stineford'],\n  research: 'orc',\n  banned: [],\n  spending: 0,\n  chapter1Bank: true,\n  chapter1x2Tower: true,\n  chapter3Armorer: true,\n  chapter3Tradesmasher: true,\n  trades: ['givini', 'takkan', 'chalice'],\n  eustrinEmbassy: 300000,\n};\n\nconst toSelectOptions = (list) => {\n  return [...list].sort().map((value) => {\n    return {\n      label: value,\n      value: value,\n    };\n  });\n};\n\nconst requiredRule = { required: true, message: `Please provide a value.` };\n\nconst CustomForm = ({ onFinish, loading }) => {\n  const [form] = Form.useForm();\n\n  const [previous, setPrevious] = useState(initialValues.previous);\n  const [mandatory, setMandatory] = useState(initialValues.mandatory);\n  const [strategy, setStrategy] = useState(initialValues.strategy);\n\n  useEffect(() => {\n    if (['social', 'succession'].includes(strategy)) {\n      if (form.getFieldValue('merchantSolution') === 'wait') {\n        form.setFieldsValue({ merchantSolution: 'neutral' });\n      }\n      return;\n    }\n\n    if (form.getFieldValue('merchantSolution') === 'neutral') {\n      form.setFieldsValue({ merchantSolution: 'wait' });\n    }\n  }, [form, strategy]);\n\n  return (\n    <Form\n      initialValues={initialValues}\n      onFinish={onFinish}\n      onValuesChange={(_, allValues) => {\n        setPrevious(allValues.previous);\n        setMandatory(allValues.mandatory);\n        setStrategy(allValues.strategy);\n      }}\n      className=\"round-form first-round-form\"\n      form={form}\n    >\n      <div className=\"past-block\">\n        <Title level={2}>{`Chapters 1-3`}</Title>\n        <Card>\n          <div className=\"numbers\">\n            <Form.Item\n              label={`ProN remaining at the end of chapter 3`}\n              name=\"remainingPron\"\n              tooltip={`In the Calculator, go to \"War Investment Phase\" and copy the value next to \"ProN available\".`}\n              rules={[requiredRule]}\n            >\n              <InputNumber />\n            </Form.Item>\n            <Form.Item\n              label={`Total profit at the start of chapter 4`}\n              name=\"baseProfit\"\n              tooltip={`In the Calculator, go to \"First Tower Run and Investment and copy the value next to \"Total ProN Return\".`}\n              rules={[requiredRule]}\n            >\n              <InputNumber />\n            </Form.Item>\n            <Form.Item\n              label={`Social standing at the start of chapter 4`}\n              name=\"startingSocial\"\n              tooltip={`In the Calculator, go to \"War Investment Phase\" and copy the value next to \"Social Score\".`}\n              rules={[requiredRule]}\n            >\n              <InputNumber />\n            </Form.Item>\n            <Form.Item\n              label={`Price of the Aram Eustrin Embassy`}\n              name=\"eustrinEmbassy\"\n              tooltip={`In the Calculator, search for \"Aram's Eustrin Embassy\" and copy-paste the given prince here.`}\n              rules={[requiredRule]}\n            >\n              <InputNumber />\n            </Form.Item>\n          </div>\n\n          <Form.Item\n            label={`Investments already bought during chapters 2/3`}\n            name=\"previous\"\n          >\n            <Select\n              options={toSelectOptions(possiblePrevious)}\n              mode=\"multiple\"\n            />\n          </Form.Item>\n\n          <div className=\"checkboxes\">\n            <Form.Item name=\"chapter1x2Tower\" valuePropName=\"checked\">\n              <Checkbox>{`You visited the Stineford Succubus Tower during chapter 1/2.`}</Checkbox>\n            </Form.Item>\n            {!previous.includes('Premium Steel Owner') && (\n              <Form.Item name=\"chapter1Steel\" valuePropName=\"checked\">\n                <Checkbox>{`You invested 20,000 ProN in Premium Steel during chapter 1.`}</Checkbox>\n              </Form.Item>\n            )}\n            {!previous.includes('Yhilini Bank Core Lender') && (\n              <Form.Item name=\"chapter1Bank\" valuePropName=\"checked\">\n                <Checkbox>{`You invested in the Yhilin Bank during chapter 1.`}</Checkbox>\n              </Form.Item>\n            )}\n            {!(\n              previous.includes('Yhilini Succubi Trade') &&\n              previous.includes('Mercenary Offices')\n            ) && (\n              <Form.Item name=\"chapter3Infrastructure\" valuePropName=\"checked\">\n                <Checkbox>{`You funded Yhilin Infrastructure during chapter 3.`}</Checkbox>\n              </Form.Item>\n            )}\n            <Form.Item name=\"chapter3Armorer\" valuePropName=\"checked\">\n              <Checkbox>{`You visited the Succubus Armorer during chapter 3.`}</Checkbox>\n            </Form.Item>\n            <Form.Item name=\"chapter3Tradesmasher\" valuePropName=\"checked\">\n              <Checkbox>{`You met Tradesmasher during chapter 3.`}</Checkbox>\n            </Form.Item>\n          </div>\n        </Card>\n      </div>\n\n      <Title level={2}>{`Chapter 4 – Round 1`}</Title>\n      <Card title={`Strategy`}>\n        <Form.Item name=\"strategy\" label={`Succession crisis`}>\n          <Select\n            options={[\n              {\n                label: `Focus on profits; do only the bare minimum for the Ardan succession crisis (New Givini ≥ 25).`,\n                value: 'money',\n              },\n              {\n                label: `Reach most thresholds for the Ardan succession crisis while keeping a focus on profits (New Givini ≥ 25, Social ≥ 30).`,\n                value: 'compromise',\n              },\n              {\n                label: `Mix profits and social to achieve almost everything in the Ardan succession crisis (New Givini ≥ 25, Social ≥ 40).`,\n                value: 'social',\n              },\n              {\n                label: `Go all in on the Ardan succession crisis (New Givini ≥ 25, Social ≥ 40, War Monument or Givini Mage Guild).`,\n                value: 'succession',\n              },\n            ]}\n          />\n        </Form.Item>\n        <div className=\"selects\">\n          <Form.Item label={`Merchant dispute`} name=\"merchantSolution\">\n            <Select\n              options={[\n                {\n                  value: 'neutral',\n                  label: `Neutral compromise (force Social ≥ 40)`,\n                },\n                {\n                  value: 'givini',\n                  label: `Favor New Givini`,\n                },\n                {\n                  value: 'wait',\n                  label: `Wait`,\n                },\n              ]}\n            />\n          </Form.Item>\n        </div>\n        <div className=\"selects\">\n          <Form.Item label={`Research`} name=\"research\">\n            <Select\n              options={[\n                {\n                  value: 'orc',\n                  label: `Orc Diversification`,\n                },\n                {\n                  value: 'unpeople',\n                  label: `Unpeople Transformation`,\n                },\n                {\n                  value: 'purity',\n                  label: `Purity Magic`,\n                },\n                {\n                  value: 'defense',\n                  label: `Base Defense`,\n                },\n              ]}\n            />\n          </Form.Item>\n          <Form.Item label={`Jhenno's cooperation`} name=\"jhenno\">\n            <Select\n              options={[\n                {\n                  value: 'politics',\n                  label: `Politics`,\n                },\n                {\n                  value: 'religion',\n                  label: `Religion`,\n                },\n              ]}\n            />\n          </Form.Item>\n          <Form.Item label={`Rose's house magical items`} name=\"magicalItems\">\n            <Select\n              options={[\n                {\n                  value: 'chalice',\n                  label: `Chalice States`,\n                },\n                {\n                  value: 'givini',\n                  label: `Givini`,\n                },\n                {\n                  value: 'takkan',\n                  label: `Tak'Kan`,\n                },\n              ]}\n            />\n          </Form.Item>\n        </div>\n\n        <Divider />\n        <Mandatory\n          purchased={previous}\n          form={form}\n          tooltip={`Forcing a few certain investments can improve performances tremendously.`}\n        />\n        <Banned\n          purchased={[...previous, ...mandatory]}\n          form={form}\n          tooltip={\n            <>\n              {`For cases where a particular investment might be more of a curse than a blessing in the long run and you want to see what happens without it.`}\n              <br />\n              {`Banning an investment that you know to be useless at that particular point can also improve performances quite a bit, especially if said investment is cheap.`}\n            </>\n          }\n        />\n        <Extra\n          tooltip={`Money to be spent on investments not listed elsewhere, like headquarters upgrades.`}\n        />\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            {`Submit`}\n          </Button>\n        </Form.Item>\n      </Card>\n    </Form>\n  );\n};\n\nexport default CustomForm;\n","export const buildFinalStandings = ({\n  initialStandings,\n  investmentChanges,\n  nonInvestmentChanges,\n}) => {\n  let finalStandings = {};\n\n  ['profits', 'givini', 'social', 'takkan', 'chalice'].forEach((key) => {\n    finalStandings[key] =\n      initialStandings[key] +\n      (investmentChanges[key] || 0) +\n      (nonInvestmentChanges[key] || 0);\n  });\n\n  finalStandings['investments'] = [\n    ...initialStandings.investments,\n    ...investmentChanges.investments.map(({ name }) => name),\n  ];\n\n  finalStandings['money'] =\n    initialStandings.money +\n    initialStandings.profits -\n    investmentChanges.price +\n    nonInvestmentChanges.money;\n\n  return finalStandings;\n};\n\nexport const nF = (number) => number.toLocaleString('en-US');\n","import { Table } from 'antd';\nimport { nF } from '../misc';\n\nconst numberColWidth = 120;\n\nconst NumberCell = ({ children, format }) => {\n  const number = children;\n  const formattedNumber = !!format ? nF(Math.abs(number)) : Math.abs(number);\n\n  return `${number < 0 ? `-` : `+`}${formattedNumber}`;\n};\n\nconst Investments = ({ investments }) => {\n  const dataSource = investments.map(({ name, ...data }) => {\n    return {\n      key: name,\n      name,\n      ...data,\n    };\n  });\n\n  const columns = [\n    {\n      title: `Name`,\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n    },\n    {\n      title: `Price`,\n      dataIndex: 'price',\n      render: (price) => nF(price),\n      sorter: (a, b) => a.price - b.price,\n      width: numberColWidth,\n    },\n    {\n      title: `Profits`,\n      dataIndex: 'profits',\n      render: (profits) => nF(profits),\n      sorter: (a, b) => a.profits - b.profits,\n      width: numberColWidth,\n    },\n    {\n      title: `Social`,\n      dataIndex: 'social',\n      render: (social = 0) => <NumberCell>{social}</NumberCell>,\n      width: numberColWidth,\n    },\n  ];\n\n  return <Table dataSource={dataSource} columns={columns} pagination={false} />;\n};\n\nconst Others = ({ list = [] }) => {\n  const dataSource = list.map(({ name, ...data }) => {\n    return {\n      key: name,\n      name,\n      ...data,\n    };\n  });\n\n  const render = (value = 0) => <NumberCell format={true}>{value}</NumberCell>;\n\n  const columns = [\n    {\n      title: `Name`,\n      dataIndex: 'name',\n    },\n    {\n      title: `ProN`,\n      dataIndex: 'money',\n      render,\n      width: numberColWidth,\n    },\n    {\n      title: `Profits`,\n      dataIndex: 'profits',\n      render,\n      width: numberColWidth,\n    },\n    {\n      title: `Social`,\n      dataIndex: 'social',\n      render,\n      width: numberColWidth,\n    },\n  ];\n\n  return <Table dataSource={dataSource} columns={columns} pagination={false} />;\n};\n\nconst Ledger = ({\n  initialStandings,\n  nonInvestmentChanges,\n  investmentChanges,\n}) => {\n  const render = (value, { key }) => {\n    if (['base', 'total'].includes(key)) {\n      return nF(value);\n    }\n    return <NumberCell format={true}>{value}</NumberCell>;\n  };\n\n  const columns = [\n    {\n      dataIndex: 'category',\n    },\n    {\n      title: `ProN`,\n      dataIndex: 'money',\n      render,\n      width: numberColWidth,\n    },\n    {\n      title: `Profits`,\n      dataIndex: 'profits',\n      render,\n      width: numberColWidth,\n    },\n    {\n      title: `Social`,\n      dataIndex: 'social',\n      render,\n      width: numberColWidth,\n    },\n  ];\n\n  const sum = (key) =>\n    initialStandings[key] + nonInvestmentChanges[key] + investmentChanges[key];\n\n  const extraProfits =\n    investmentChanges.profits -\n    investmentChanges.investments.reduce(\n      (acc, { profits }) => acc + profits,\n      0\n    );\n\n  const dataSource = [\n    {\n      ...initialStandings,\n      key: 'base',\n      category: `Previously`,\n    },\n    {\n      key: 'previous_investments',\n      category: `Start of the round`,\n      money: initialStandings.profits,\n      profits: 0,\n      social: 0,\n    },\n    {\n      ...investmentChanges,\n      key: 'investments',\n      category: `Changes from new investments`,\n      money: -investmentChanges.price,\n      profits: investmentChanges.profits - extraProfits,\n    },\n    {\n      ...nonInvestmentChanges,\n      key: 'other',\n      category: `Other changes`,\n      profits: nonInvestmentChanges.profits + extraProfits,\n    },\n  ];\n\n  const otherList = (() => {\n    if (extraProfits > 0) {\n      return [\n        ...nonInvestmentChanges.list,\n        {\n          name: `Extra profits from past investments`,\n          profits: extraProfits,\n        },\n      ];\n    }\n\n    return nonInvestmentChanges.list;\n  })();\n\n  return (\n    <Table\n      dataSource={dataSource}\n      columns={columns}\n      pagination={false}\n      bordered={true}\n      expandable={{\n        expandedRowRender: ({ key }) => {\n          if (key === 'investments') {\n            return <Investments investments={investmentChanges.investments} />;\n          }\n          if (key === 'other') {\n            return <Others list={otherList} />;\n          }\n          return null;\n        },\n        rowExpandable: ({ key }) => {\n          if (key === 'investments') {\n            return true;\n          }\n\n          if (key === 'other' && !!nonInvestmentChanges.list?.length) {\n            return true;\n          }\n\n          return false;\n        },\n        defaultExpandAllRows: true,\n      }}\n      summary={() => {\n        return (\n          <Table.Summary.Row>\n            <Table.Summary.Cell\n              colSpan={2}\n            >{`Standings at the end of the round`}</Table.Summary.Cell>\n            <Table.Summary.Cell>\n              {nF(\n                initialStandings.money +\n                  initialStandings.profits +\n                  nonInvestmentChanges.money -\n                  investmentChanges.price\n              )}\n            </Table.Summary.Cell>\n            <Table.Summary.Cell>{nF(sum('profits'))}</Table.Summary.Cell>\n            <Table.Summary.Cell>{sum('social')}</Table.Summary.Cell>\n          </Table.Summary.Row>\n        );\n      }}\n      className=\"ledger\"\n    />\n  );\n};\n\nexport default Ledger;\n","const Addition = ({ startingValue = 0, dataSources }) => {\n  return (\n    <table className=\"addition\">\n      <tbody>\n        <tr>\n          <td>{`Initial value`}</td>\n          <td>{startingValue}</td>\n          <td></td>\n        </tr>\n      </tbody>\n      {dataSources\n        .filter(({ dataSource }) => dataSource.length > 0)\n        .map(({ title, dataSource }, index) => {\n          return (\n            <tbody key={index.toString()}>\n              <tr>\n                <th colSpan=\"3\" scope=\"col\">\n                  {title}\n                </th>\n              </tr>\n              {dataSource.map(({ label, values, explanation }, index) => {\n                return (\n                  <tr key={index.toString()}>\n                    <td>{label}</td>\n                    <td>{values.map((value) => `+${value}`).join(' ')}</td>\n                    <td>{explanation}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          );\n        })}\n      <tfoot>\n        <tr>\n          <th scope=\"row\">{`Total`}</th>\n          <td>\n            {startingValue +\n              dataSources.reduce(\n                (acc, { dataSource }) =>\n                  acc +\n                  dataSource.reduce(\n                    (acc, { values }) =>\n                      acc + values.reduce((acc, val) => acc + val),\n                    0\n                  ),\n                0\n              )}\n          </td>\n        </tr>\n      </tfoot>\n    </table>\n  );\n};\n\nexport default Addition;\n","const sum = (list) =>\n  list.reduce(\n    (acc, { values }) => acc + values.reduce((acc, value) => acc + value, 0),\n    0\n  );\n\nexport const startingValue = -5;\n\nexport const preliminaryChanges = ({ investments }) => {\n  return [\n    { label: `Petitions`, values: [5, 5, 2, 2, 2] },\n    investments.includes('New Givini Trade') && {\n      label: `New Givini Trade`,\n      values: [5],\n      explanation: `On purchase`,\n    },\n    investments.includes(\"Min's Trade Route\") && {\n      label: `Min's Trade Route`,\n      values: [1],\n    },\n  ].filter(Boolean);\n};\n\nexport const baseValue = ({ chapter3Investments }) =>\n  startingValue + sum(preliminaryChanges({ investments: chapter3Investments }));\n\nexport const roundOneChanges = (\n  { merchantSolution, magicalItems },\n  previousInvestments\n) => {\n  return [\n    magicalItems === 'givini' && {\n      label: `House Rose's magical items: Givini`,\n      values: [2],\n    },\n    merchantSolution === 'neutral' && {\n      label: `Merchant dispute: Neutral compromise`,\n      values: [1],\n    },\n    merchantSolution === 'givini' && {\n      label: `Merchant dispute: Favor New Givini`,\n      values: [2],\n    },\n    { label: `Givino Vinai equipment shop girl`, values: [1] },\n    { label: `Givini king`, values: [1] },\n    previousInvestments.includes('New Givini Trade') && {\n      label: `New Givini Trade`,\n      values: [1],\n      explanation: `At the end of the round (before profits from the Givini Orc Merchant are computed)`,\n    },\n  ].filter(Boolean);\n};\n\nexport const roundOneValue = (...params) => sum(roundOneChanges(...params));\n\nexport const roundTwoChanges = ({ merchantSolution2 }, previousInvestments) => {\n  return [\n    merchantSolution2 === 'neutral' && {\n      label: `Merchant dispute: Neutral compromise`,\n      values: [1],\n    },\n    merchantSolution2 === 'givini' && {\n      label: `Merchant dispute: Favor New Givini`,\n      values: [2],\n    },\n    previousInvestments.includes('New Givini Trade') && {\n      label: `New Givini Trade`,\n      values: [1],\n      explanation: `At the end of the round (before profits from the Givini Orc Merchant are computed)`,\n    },\n  ].filter(Boolean);\n};\n\nexport const roundTwoValue = (...params) => sum(roundTwoChanges(...params));\n\nexport const roundThreeChanges = (\n  { merchantSolution3, gawnfallTakkan, gawnfallMercantile },\n  previousInvestments\n) => {\n  return [\n    merchantSolution3 === 'neutral' && {\n      label: `Merchant dispute: Neutral compromise`,\n      values: [1],\n    },\n    merchantSolution3 === 'givini' && {\n      label: `Merchant dispute: Favor New Givini`,\n      values: [2],\n    },\n    gawnfallTakkan === 'major' && {\n      label: `Gawnfall: Tak'Kan vote`,\n      values: [1],\n    },\n    ['excellent', 'good'].includes(gawnfallMercantile) && {\n      label: `Gawnfall: Mercantile solution`,\n      values: [1],\n    },\n    previousInvestments.includes('New Givini Trade') && {\n      label: `New Givini Trade`,\n      values: [1],\n      explanation: `At the end of the round (before profits from the Givini Orc Merchant are computed)`,\n    },\n  ].filter(Boolean);\n};\n\nexport const roundThreeValue = (...params) => sum(roundThreeChanges(...params));\n","import Addition from '../../results/Addition';\nimport {\n  startingValue,\n  preliminaryChanges,\n  roundOneChanges,\n} from '../../data/givini';\n\nconst Givini = ({\n  chapter3Investments = [],\n  roundOneInvestments = [],\n  decisions = {},\n}) => {\n  return (\n    <Addition\n      startingValue={startingValue}\n      dataSources={[\n        {\n          title: `Chapter start`,\n          dataSource: preliminaryChanges({ investments: chapter3Investments }),\n        },\n        {\n          title: `Investments`,\n          dataSource: roundOneInvestments\n            .filter(({ givini = 0 }) => givini !== 0)\n            .map(({ name, givini }) => {\n              return { label: name, values: [givini] };\n            })\n            .sort(({ label: a }, { label: b }) => a.localeCompare(b)),\n        },\n        {\n          title: `Other changes`,\n          dataSource: roundOneChanges(decisions, chapter3Investments),\n        },\n      ]}\n    />\n  );\n};\n\nexport default Givini;\n","const sum = (list) =>\n  list.reduce(\n    (acc, { values }) => acc + values.reduce((acc, value) => acc + value, 0),\n    0\n  );\n\nexport const startingValue = -5;\n\nexport const preliminaryChanges = (previousInvestments) => {\n  return [\n    { label: `Petitions`, values: [5, 2, 2, 5] },\n    previousInvestments.includes(\"Tak'Kan Trade\") && {\n      label: `Tak'Kan Trade`,\n      values: [5],\n      explanation: `On purchase`,\n    },\n  ].filter(Boolean);\n};\n\nexport const baseValue = (...params) =>\n  startingValue + sum(preliminaryChanges(...params));\n\nexport const roundOneChanges = (\n  { magicalItems, research },\n  previousInvestments\n) => {\n  return [\n    magicalItems === 'takkan' && {\n      label: `House Rose's magical items: Tak'Kan`,\n      values: [2],\n    },\n    previousInvestments.includes(\"Tak'Kan Trade\") && {\n      label: `Tak'Kan Trade`,\n      values: [1],\n      explanation: `At the end of the round`,\n    },\n    research === 'orc' && {\n      label: `Research: Orc Diversification`,\n      values: [5],\n    },\n  ].filter(Boolean);\n};\n\nexport const roundOneValue = (...params) => sum(roundOneChanges(...params));\n\nexport const roundTwoChanges = ({ research }, previousInvestments) => {\n  return [\n    previousInvestments.includes(\"Tak'Kan Trade\") && {\n      label: `Tak'Kan Trade`,\n      values: [1],\n      explanation: `At the end of the round`,\n    },\n    research === 'orc' && {\n      label: `Research: Orc Diversification`,\n      values: [5],\n    },\n  ].filter(Boolean);\n};\n\nexport const roundTwoValue = (...params) => sum(roundTwoChanges(...params));\n\nexport const council = ({ investments = [], takkan, researches = [] }) => {\n  let yes = 3 + 1 + 1; //Base, Elleani, Impaler\n  let no = 2;\n\n  if (takkan >= 40) {\n    yes += 4;\n  } else if (takkan >= 30) {\n    yes += 3;\n    no += 1;\n  } else if (takkan >= 20) {\n    yes += 2;\n    no += 2;\n  } else if (takkan >= 10) {\n    yes += 1;\n    no += 3;\n  } else {\n    no += 4;\n  }\n\n  if (researches.includes('orc')) {\n    yes += 1;\n  } else {\n    no += 1;\n  }\n\n  yes += investments.filter((name) => {\n    return [\n      'Orc Pools Upgrade',\n      \"Tarran'Kan Housing + Tarran'Kan Trade Upgrade\",\n      'Hall of Mental Strength',\n      'Imp Offices',\n    ].includes(name);\n  }).length;\n\n  if (investments.includes('Orcish Democracy')) {\n    yes = +2;\n  }\n\n  return yes / (yes + no);\n};\n\nexport const roundThreeChanges = (\n  { research, gawnfallMercantile, gawnfallTakkan },\n  previousInvestments\n) => {\n  return [\n    gawnfallTakkan === 'minor' && {\n      label: `Gawnfall: Tak'Kan vote`,\n      values: [2],\n    },\n    gawnfallTakkan === 'major' && {\n      label: `Gawnfall: Tak'Kan vote`,\n      values: [5],\n    },\n    ['excellent', 'good'].includes(gawnfallMercantile) && {\n      label: `Gawnfall: Mercantile solution`,\n      values: [1],\n    },\n    previousInvestments.includes(\"Tak'Kan Trade\") && {\n      label: `Tak'Kan Trade`,\n      values: [1],\n      explanation: `At the end of the round`,\n    },\n    research === 'orc' && {\n      label: `Research: Orc Diversification`,\n      values: [5],\n    },\n  ].filter(Boolean);\n};\n\nexport const roundThreeValue = (...params) => sum(roundThreeChanges(...params));\n","import Addition from '../../results/Addition';\nimport {\n  startingValue,\n  preliminaryChanges,\n  roundOneChanges,\n} from '../../data/takkan';\n\nconst Takkan = ({\n  roundOneInvestments = [],\n  decisions = {},\n  chapter3Investments = [],\n}) => {\n  return (\n    <Addition\n      startingValue={startingValue}\n      dataSources={[\n        {\n          title: `Chapter start`,\n          dataSource: preliminaryChanges(chapter3Investments),\n        },\n        {\n          title: `Investments`,\n          dataSource: roundOneInvestments\n            .filter(({ takkan = 0 }) => takkan !== 0)\n            .map(({ name, takkan }) => {\n              return { label: name, values: [takkan] };\n            })\n            .sort(({ label: a }, { label: b }) => a.localeCompare(b)),\n        },\n        {\n          title: `Other changes`,\n          dataSource: roundOneChanges(decisions, chapter3Investments),\n        },\n      ]}\n    />\n  );\n};\n\nexport default Takkan;\n","const sum = (list) =>\n  list.reduce(\n    (acc, { values }) => acc + values.reduce((acc, value) => acc + value, 0),\n    0\n  );\n\nexport const startingValue = 10;\n\nexport const preliminaryChanges = ({ initialInvestments }) => {\n  return [\n    { label: `Petitions`, values: [5, 5, 1, 5, 2, 2] },\n    initialInvestments.includes('Chalice States Trade') && {\n      label: `Chalice States Trade`,\n      values: [5],\n      explanation: `On purchase`,\n    },\n    initialInvestments.includes(\"Min's Trade Route\") && {\n      label: `Min's Trade Route`,\n      values: [1],\n    },\n    initialInvestments.includes('Gasm Falls Shop') && {\n      label: `Gasm Falls Shop`,\n      values: [2],\n    },\n    initialInvestments.includes('Yhilini Succubi Trade') && {\n      label: `Yhilini Succubi Trade`,\n      values: [2],\n    },\n  ].filter(Boolean);\n};\n\nexport const baseValue = ({ initialInvestments }) =>\n  startingValue + sum(preliminaryChanges({ initialInvestments }));\n\nexport const roundOneChanges = ({ magicalItems }, previousInvestments) => {\n  return [\n    magicalItems === 'chalice' && {\n      label: `House Rose's magical items: Chalice States`,\n      values: [2],\n    },\n    previousInvestments.includes('Chalice States Trade') && {\n      label: `Chalice States Trade`,\n      values: [1],\n      explanation: `At the end of the round`,\n    },\n  ].filter(Boolean);\n};\n\nexport const roundOneValue = (...params) => sum(roundOneChanges(...params));\n\nexport const roundTwoChanges = (_, previousInvestments) => {\n  return [\n    previousInvestments.includes('Chalice States Trade') && {\n      label: `Chalice States Trade`,\n      values: [1],\n      explanation: `At the end of the round`,\n    },\n  ].filter(Boolean);\n};\n\nexport const roundTwoValue = (...params) => sum(roundTwoChanges(...params));\n\nexport const roundThreeChanges = (\n  { gawnfallMercantile, gawnfallTakkan, lustlordStatuesBought },\n  previousInvestments\n) => {\n  return [\n    lustlordStatuesBought && {\n      label: `New Lustlord Statues`,\n      values: [2],\n    },\n    gawnfallTakkan === 'major' && {\n      label: `Gawnfall: Tak'Kan vote`,\n      values: [2],\n    },\n    ['excellent', 'good'].includes(gawnfallMercantile) && {\n      label: `Gawnfall: Mercantile solution`,\n      values: [1],\n    },\n    previousInvestments.includes('Chalice States Trade') && {\n      label: `Chalice States Trade`,\n      values: [1],\n      explanation: `At the end of the round`,\n    },\n  ].filter(Boolean);\n};\n\nexport const roundThreeValue = (...params) => sum(roundThreeChanges(...params));\n","import Addition from '../../results/Addition';\nimport {\n  startingValue,\n  preliminaryChanges,\n  roundOneChanges,\n} from '../../data/chalice';\n\nconst Chalice = ({\n  chapter3Investments = [],\n  roundOneInvestments = [],\n  decisions = {},\n}) => {\n  return (\n    <Addition\n      startingValue={startingValue}\n      dataSources={[\n        {\n          title: `Chapter start`,\n          dataSource: preliminaryChanges({\n            initialInvestments: chapter3Investments,\n          }),\n        },\n        {\n          title: `Investments`,\n          dataSource: roundOneInvestments\n            .filter(({ chalice = 0 }) => chalice !== 0)\n            .map(({ name, chalice }) => {\n              return { label: name, values: [chalice] };\n            })\n            .sort(({ label: a }, { label: b }) => a.localeCompare(b)),\n        },\n        {\n          title: `Other changes`,\n          dataSource: roundOneChanges(decisions, chapter3Investments),\n        },\n      ]}\n    />\n  );\n};\n\nexport default Chalice;\n","import Ledger from '../../results/Ledger';\nimport { Card } from 'antd';\nimport Givini from './Givini';\nimport Takkan from './Takkan';\nimport Chalice from './Chalice';\n\nconst Result = ({\n  initialStandings,\n  nonInvestmentChanges,\n  investmentChanges,\n  decisions,\n}) => {\n  return (\n    <Card title={`Changes`} className=\"results\">\n      <Ledger\n        initialStandings={initialStandings}\n        nonInvestmentChanges={nonInvestmentChanges}\n        investmentChanges={investmentChanges}\n      />\n      <div>\n        <Card title={`New Givini`} type=\"inner\">\n          <Givini\n            chapter3Investments={initialStandings.investments}\n            roundOneInvestments={investmentChanges.investments}\n            decisions={decisions}\n          />\n        </Card>\n        <Card title={`Tak'Kan`} type=\"inner\">\n          <Takkan\n            chapter3Investments={initialStandings.investments}\n            roundOneInvestments={investmentChanges.investments}\n            decisions={decisions}\n          />\n        </Card>\n        <Card title={`Chalice States`} type=\"inner\">\n          <Chalice\n            chapter3Investments={initialStandings.investments}\n            roundOneInvestments={investmentChanges.investments}\n            decisions={decisions}\n          />\n        </Card>\n      </div>\n    </Card>\n  );\n};\n\nexport default Result;\n","import { useEffect, useRef } from 'react';\n\nconst ScrollTo = ({ children, data }) => {\n  const resultRef = useRef(null);\n  useEffect(() => {\n    if (!data || !resultRef.current) {\n      return;\n    }\n    resultRef.current.scrollIntoView({ behavior: 'smooth' });\n  }, [data, resultRef]);\n\n  if (!data) {\n    return null;\n  }\n\n  return <div ref={resultRef}>{children}</div>;\n};\n\nexport default ScrollTo;\n","import Form from './Form';\nimport Result from './results';\nimport {\n  baseValue as giviniBaseValue,\n  roundOneValue as giviniRoundOneValue,\n} from '../data/givini';\nimport { buildFinalStandings } from '../misc';\nimport {\n  baseValue as takkanBaseValue,\n  roundOneValue as takkanRoundOneValue,\n} from '../data/takkan';\nimport ScrollTo from '../results/ScrollTo';\nimport {\n  baseValue as chaliceBaseValue,\n  roundOneValue as chaliceRoundOneValue,\n} from '../data/chalice';\n\n// Removing investments that serve no purpose for the algorithm here\n// They can still be forced with the \"mandatory option\"\nconst shadowBans = [\n  'Orcish Drake Statue + Orcish Gargoyle Statue + Orcish Golden Drake Statue',\n  'Aram Eustrin Embassy',\n];\n\nconst socialRequirement = (\n  startingSocial,\n  { strategy, jhenno, merchantSolution }\n) => {\n  if (strategy === 'money') {\n    return 0;\n  }\n  if (merchantSolution === 'neutral') {\n    return 40 - startingSocial;\n  }\n  const base = strategy === 'compromise' ? 30 : 40;\n  const jhennoModifier = jhenno === 'politics' ? 1 : 0;\n  return base - (startingSocial + jhennoModifier);\n};\n\nconst giviniRequirement = ({ giviniStart, giviniExtra }) => {\n  const absoluteRequirement = 25;\n  const offset = 3; // Points earned after the requirement matters\n\n  return absoluteRequirement - giviniStart - giviniExtra + offset;\n};\n\nconst buildNonInvestmentsChange = ({\n  decisions,\n  spending,\n  initialStandings,\n}) => {\n  const trades = initialStandings.investments.filter((name) =>\n    ['New Givini Trade', \"Tak'Kan Trade\", 'Chalice States Trade'].includes(name)\n  );\n\n  const { jhenno } = decisions;\n\n  const nonInvestmentChangesList = [\n    jhenno === 'politics' && {\n      name: `Jhenno's political cooperation`,\n      social: 1,\n    },\n    {\n      name: `Succession crisis' reward (best result)`,\n      social: 3,\n    },\n    trades.length > 0 && {\n      name: `The Trades become less profitable`,\n      profits: -100000 * trades.length,\n    },\n    !!spending && {\n      name: `Other spending`,\n      money: -spending,\n    },\n  ].filter(Boolean);\n\n  return {\n    givini: giviniRoundOneValue(decisions, initialStandings.investments),\n    takkan: takkanRoundOneValue(decisions, initialStandings.investments),\n    chalice: chaliceRoundOneValue(decisions, initialStandings.investments),\n    money: nonInvestmentChangesList.reduce(\n      (acc, { money = 0 }) => acc + money,\n      0\n    ),\n    profits: nonInvestmentChangesList.reduce(\n      (acc, { profits = 0 }) => acc + profits,\n      0\n    ),\n    social: nonInvestmentChangesList.reduce(\n      (acc, { social = 0 }) => acc + social,\n      0\n    ),\n    list: nonInvestmentChangesList,\n  };\n};\n\nconst compute = async ({\n  runInWoker,\n  initialStandings,\n  decisions,\n  nonInvestmentChanges,\n  mandatory,\n  misc,\n  banned,\n}) => {\n  const giviniStart = initialStandings.givini;\n  const giviniExtra = nonInvestmentChanges.givini;\n\n  const params = {\n    ...misc,\n    previousInvestments: initialStandings.investments,\n    money:\n      initialStandings.money +\n      initialStandings.profits +\n      nonInvestmentChanges.money,\n    otherRequirements: {\n      social: socialRequirement(initialStandings.social, decisions),\n      givini: giviniRequirement({\n        giviniStart,\n        giviniExtra,\n      }),\n      mandatory,\n      atLeastOne:\n        decisions.strategy === 'succession'\n          ? ['War Monument', 'Givini Mage Guild']\n          : undefined,\n      banned: [...shadowBans, ...banned],\n    },\n    giviniStart,\n    giviniExtra,\n  };\n\n  return runInWoker(params);\n};\n\nconst onFinish = async ({ values, setResult, runInWoker, setError }) => {\n  setError(undefined);\n\n  const {\n    previous = [],\n    remainingPron,\n    baseProfit,\n    startingSocial,\n\n    strategy,\n    merchantSolution,\n    jhenno,\n    magicalItems,\n    research,\n\n    mandatory,\n    banned,\n    spending,\n\n    chapter1Steel,\n    chapter3Infrastructure,\n    chapter1Bank,\n    chapter1x2Tower,\n    chapter3Armorer,\n    chapter3Tradesmasher,\n    eustrinEmbassy,\n  } = values;\n\n  const initialStandings = {\n    money: remainingPron,\n    profits: baseProfit,\n    investments: previous,\n    social: startingSocial,\n    givini: giviniBaseValue({ chapter3Investments: previous }),\n    takkan: takkanBaseValue(previous),\n    chalice: chaliceBaseValue({ initialInvestments: previous }),\n  };\n\n  const decisions = {\n    strategy,\n    merchantSolution,\n    magicalItems,\n    research,\n    jhenno,\n  };\n\n  const misc = {\n    chapter1Steel,\n    chapter3Infrastructure,\n    chapter1Bank,\n    chapter1x2Tower,\n    chapter3Armorer,\n    chapter3Tradesmasher,\n    eustrinEmbassy,\n  };\n\n  const nonInvestmentChanges = buildNonInvestmentsChange({\n    decisions,\n    spending,\n    initialStandings,\n  });\n\n  const result = await compute({\n    runInWoker,\n    initialStandings,\n    decisions,\n    nonInvestmentChanges,\n    mandatory,\n    misc,\n    banned,\n  });\n\n  if (!result) {\n    setResult(undefined);\n    setError(\n      `Couldn't find a working combination of investments for that strategy with these starting values, sorry.`\n    );\n    return;\n  }\n\n  const investmentChanges = { ...result, money: -result.price };\n\n  setResult({\n    initialStandings,\n    decisions,\n    nonInvestmentChanges,\n    investmentChanges,\n    finalStandings: buildFinalStandings({\n      initialStandings,\n      nonInvestmentChanges,\n      investmentChanges,\n    }),\n    misc,\n  });\n  setError(undefined);\n};\n\nconst FirstRound = ({ runInWoker, loading, result, setResult, setError }) => {\n  return (\n    <div className=\"round-one\">\n      <Form\n        onFinish={(values) => {\n          onFinish({ values, setResult, runInWoker, setError });\n        }}\n        loading={loading}\n      />\n      <ScrollTo data={result}>\n        <Result {...result} />\n      </ScrollTo>\n    </div>\n  );\n};\n\nexport default FirstRound;\n","import { Alert, Typography } from 'antd';\n\nconst { Title } = Typography;\n\nconst Disclaimer = () => {\n  return (\n    <div className=\"disclaimer\">\n      <div className=\"preamble\">\n        <Title>{`Investment Advisor`}</Title>\n        <p>\n          {`A tool to help you choose the best theoretical best possible investments for chapter 4 of `}\n          <a href=\"https://the-last-sovereign.blogspot.com/\">{`The Last Sovereign`}</a>\n          {`.`}\n        </p>\n        <p>{`Just fill in the requested information, choose your strategy and let a quasi-brute force algorithm determine what's best for you (assuming a definition of best here as highest short term returns, then lowest price, while still fulfilling the requirements of your strategy).`}</p>\n        <p>\n          {`This is definetely an advanced tool, intended for people who are already familiar with the game's `}\n          <a href=\"https://thelastsovereign.miraheze.org/wiki/Secret_stats\">\n            {`inner workings`}\n          </a>\n          {`, with the awesome `}\n\n          <a href=\"https://thelastsovereign.flarum.cloud/d/15-calculator\">{`Calculator`}</a>\n          {`, and are now looking for the last lousy optimizations they might have missed.`}\n        </p>\n      </div>\n      <Alert\n        message={`Assumptions`}\n        description={\n          <>\n            <p>\n              <a href=\"https://www.patreon.com/posts/demographics-8851324\">{`About 85% of players have only ever played TLS with Reshaped Varia.`}</a>\n            </p>\n            <p>{`That means if I was to write a walkthrough for TLS that only covered a \"Reshaped Varia\" strategy, it'll still be usable by 85% of players. Of course, I will have to release a \"Dominated Varia\" variant eventually to account for the remaining 15%. But in the meantime, that's already 85% of people that can start playing with my walkthrough without waiting any further. Meanwhile, if I had tried to cover both cases from the start, 100% of people would have had to wait.`}</p>\n            <p>{`While I'm writing a software and not a walkthrough here, it will play by the same logic: Focus first on the \"general case\", by making a few (many) assumptions that hopefully will be true of most \"good\" saves, so to be able to release it to the public early. Then slowly cover the other cases in subsequent updates.`}</p>\n            <p>{`Therefore, at the moment, this tool takes for granted that:`}</p>\n            <ol>\n              <li>{`The Iron Cudgel was hired (in either chapter 1 or 2).`}</li>\n              <li>{`Through chapter 2, the AriGarda was bribed, the Merchant's Guild joined, and the Ardan Bank invested into.`}</li>\n              <li>{`Chapter 3 in general was good enough for Yhilin to reach its final state during the first investment phase of Chapter 4.`}</li>\n              <li>{`Chapter 3 in general and the war in particular were good enough for all petitions favorable to New Givini, Tak'Kan and the Chalice States to appear.`}</li>\n              <li>{`All such petitions were approved.`}</li>\n            </ol>\n            <p>{`Note that the final version of the advisor will likely still have a few assumptions in it, so as to keep the complexity in check. Namely, \"disaster runs\" will never be covered.`}</p>\n            <p>{`tl;dr The Advisor is currently in early access.`}</p>\n          </>\n        }\n        type=\"info\"\n        showIcon={true}\n        className=\"assumptions\"\n        closable={true}\n      />\n    </div>\n  );\n};\n\nexport default Disclaimer;\n","import { Progress, Divider, Modal, Button } from 'antd';\nimport { PoweroffOutlined } from '@ant-design/icons';\n\nconst Loading = ({\n  combinationsCount,\n  progress,\n  investmentsCount,\n  preprogress,\n  abort,\n}) => {\n  if (!investmentsCount) {\n    return null;\n  }\n\n  return (\n    <Modal visible={true} centered={true} closable={false} footer={null}>\n      <div>\n        <p>\n          {`Prefiltering ${(2 ** investmentsCount).toLocaleString('en-US')} (2`}\n          <sup>{investmentsCount}</sup>\n          {`) possibilities…`}\n        </p>\n        <Progress percent={Math.round(preprogress * 100)} />\n      </div>\n      {!!combinationsCount && (\n        <>\n          <Divider />\n          <div>\n            <p>{`Processing ${combinationsCount.toLocaleString(\n              'en-US'\n            )} remaining possibilities…`}</p>\n            <Progress percent={Math.round(progress * 10000) / 100} />\n          </div>\n        </>\n      )}\n      <Button\n        danger={true}\n        icon={<PoweroffOutlined />}\n        onClick={abort}\n        className=\"abort-button\"\n      >{`Abort`}</Button>\n    </Modal>\n  );\n};\n\nexport default Loading;\n","import { Result, Card } from 'antd';\n\nconst Failure = ({ message }) => {\n  return (\n    <Card>\n      <Result status=\"warning\" title={message} />\n    </Card>\n  );\n};\n\nexport default Failure;\n","import { Table } from 'antd';\nimport { nF } from '../misc';\n\nconst base = [\n  {\n    key: `Tower Little Girl talk`,\n    magic: 1,\n    military: 0,\n    price: 0,\n  },\n  {\n    key: `Deluxe Givini Dragon Statue`,\n    magic: 1,\n    military: 0,\n    price: 5000,\n  },\n  {\n    key: `HQ Shrine`,\n    magic: 1,\n    military: 0,\n    price: 5000,\n  },\n  {\n    key: `Orc Lab Upgrade`,\n    magic: 2,\n    military: 5,\n    price: 25000,\n  },\n  {\n    key: `Magical Shielding Upgrade`,\n    magic: 5,\n    military: 0,\n    price: 100000,\n  },\n];\n\nconst defense = [\n  {\n    key: `Research: Base Defense`,\n    military: 5,\n    magic: 10,\n    price: 0,\n  },\n];\n\nconst subsitute = [\n  {\n    key: `Wynn's Shield Upgrade`,\n    magic: 5,\n    military: 0,\n    price: 100000,\n  },\n  {\n    key: `Extradimensional Foundation`,\n    magic: 5,\n    military: 5,\n    price: 225000,\n  },\n];\n\nconst plusTenMilitary = [\n  {\n    key: `Armory Upgrade`,\n    military: 5,\n    magic: 0,\n    price: 10000,\n  },\n  {\n    key: `Orc Guard Posts`,\n    military: 3,\n    magic: 0,\n    price: 5000,\n  },\n  {\n    key: `Supplies Upgrade`,\n    military: 2,\n    magic: 0,\n    price: 10000,\n  },\n];\n\nconst plusFifteenMilitary = [\n  {\n    key: `Armory Upgrade`,\n    military: 5,\n    magic: 0,\n    price: 10000,\n  },\n  {\n    key: `Orc Guard Posts`,\n    military: 3,\n    magic: 0,\n    price: 5000,\n  },\n  {\n    key: `Second Well`,\n    military: 3,\n    magic: 0,\n    price: 10000,\n  },\n  {\n    key: `Iron Cudgel`,\n    military: 4,\n    magic: 0,\n    price: 15000,\n  },\n];\n\nconst renderPlus = (number) => `+${number}`;\n\nconst columns = [\n  {\n    title: `Upgrade`,\n    dataIndex: 'key',\n  },\n  {\n    title: `Price`,\n    dataIndex: 'price',\n    render: (number) => nF(number),\n    sorter: (a, b) => a.price - b.price,\n  },\n  {\n    title: `Military`,\n    dataIndex: 'military',\n    render: renderPlus,\n    sorter: (a, b) => a.military - b.military,\n  },\n  {\n    title: `Magic`,\n    dataIndex: 'magic',\n    render: renderPlus,\n    sorter: (a, b) => a.magic - b.magic,\n  },\n];\n\nconst dataSource = ({ research, military, magic }) => {\n  if (research === 'defense') {\n    if (military <= 10 && magic === 20) {\n      return [...defense, ...base];\n    }\n\n    if (military === 20 && magic <= 10) {\n      return [...defense, ...plusFifteenMilitary];\n    }\n\n    if (military === 20 && magic === 20) {\n      return [...defense, ...base, ...plusTenMilitary];\n    }\n  }\n\n  if (military <= 10 && magic === 20) {\n    return [...base, ...subsitute];\n  }\n\n  if (military === 20 && magic <= 10) {\n    return [...base, ...plusFifteenMilitary];\n  }\n\n  if (military === 20 && magic === 20) {\n    return [...base, ...subsitute, ...plusTenMilitary];\n  }\n\n  throw new Error('Unsupported');\n};\nconst sum = (list, key) => list.reduce((acc, data) => acc + data[key], 0);\n\nexport const price = (params) => sum(dataSource(params), 'price');\n\nconst Headquarters = ({ research, military, magic }) => {\n  const source = dataSource({ research, military, magic });\n\n  return (\n    <div className=\"headquarters-upgrades\">\n      <Table\n        dataSource={source}\n        columns={columns}\n        pagination={false}\n        summary={() => {\n          return (\n            <Table.Summary.Row>\n              <Table.Summary.Cell>{`Total`}</Table.Summary.Cell>\n              <Table.Summary.Cell>\n                {nF(sum(source, 'price'))}\n              </Table.Summary.Cell>\n              <Table.Summary.Cell>{sum(source, 'military')}</Table.Summary.Cell>\n              <Table.Summary.Cell>{sum(source, 'magic')}</Table.Summary.Cell>\n            </Table.Summary.Row>\n          );\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Headquarters;\n","import { useState, useEffect } from 'react';\nimport { Form, Button, Card, Select } from 'antd';\nimport Headquarters, { price as headquartersPrice } from './Headquarters';\nimport { nF } from '../misc';\nimport Banned from '../components/form/Banned';\nimport Mandatory from '../components/form/Mandatory';\nimport Extra from '../components/form/Extra';\n\nconst initialValues = {\n  merchantSolution2: 'neutral',\n  headquarters: '20/10',\n  orcCouncil: 0.8,\n  mandatory: ['Yhilini Airship Fleet'],\n  banned: [],\n  spending: 0,\n};\n\nconst CustomForm = ({\n  onFinish,\n  loading,\n  firstRoundDecisions,\n  purchasedInvestments,\n}) => {\n  const [form] = Form.useForm();\n\n  const [hq, setHq] = useState(initialValues.headquarters);\n  const [military, magic] = hq.split('/').map((x) => parseInt(x));\n  const [mandatory, setMandatory] = useState(initialValues.mandatory);\n\n  const previousResearch = firstRoundDecisions.research;\n  useEffect(() => {\n    form.setFieldsValue({\n      research: previousResearch === 'purity' ? 'orc' : 'purity',\n    });\n  }, [form, previousResearch]);\n\n  return (\n    <Form\n      initialValues={initialValues}\n      onFinish={onFinish}\n      className=\"round-form second-round-form\"\n      form={form}\n      onValuesChange={(_, allValues) => {\n        setHq(allValues.headquarters);\n        setMandatory(allValues.mandatory);\n      }}\n    >\n      <Card title={`Stategy`} type=\"inner\">\n        <div className=\"two-columns\">\n          <div>\n            {firstRoundDecisions.merchantSolution === 'wait' && (\n              <Form.Item label={`Merchant dispute`} name=\"merchantSolution2\">\n                <Select\n                  options={[\n                    {\n                      value: 'neutral',\n                      label: `Neutral compromise (force Social ≥ 40)`,\n                    },\n                    {\n                      value: 'givini',\n                      label: `Favor New Givini`,\n                    },\n                    {\n                      value: 'wait',\n                      label: `Wait`,\n                    },\n                  ]}\n                />\n              </Form.Item>\n            )}\n            <Form.Item name=\"orcCouncil\" label={`Orc council`}>\n              <Select\n                options={[\n                  {\n                    label: `Substantial majority (≥ 65%)`,\n                    value: 0.65,\n                  },\n                  {\n                    label: `Overwhelming majority (≥ 80%)`,\n                    value: 0.8,\n                  },\n                ]}\n              />\n            </Form.Item>\n            <Form.Item name=\"headquarters\" label={`Headquarters`}>\n              <Select\n                options={[\n                  {\n                    label: `Pay ${nF(\n                      headquartersPrice({\n                        research: previousResearch,\n                        military: 20,\n                        magic: 10,\n                      })\n                    )} ProN for Military ≥ 20, Magic ≥ 10.`,\n                    value: '20/10',\n                  },\n                  {\n                    label: `Pay ${nF(\n                      headquartersPrice({\n                        research: previousResearch,\n                        military: 5,\n                        magic: 20,\n                      })\n                    )} ProN for Military ≥ 5, Magic ≥ 20.`,\n                    value: '5/20',\n                  },\n                  {\n                    label: `Pay ${nF(\n                      headquartersPrice({\n                        research: previousResearch,\n                        military: 20,\n                        magic: 20,\n                      })\n                    )} ProN for Military ≥ 20, Magic ≥ 20.`,\n                    value: '20/20',\n                  },\n                ]}\n              />\n            </Form.Item>\n            <Form.Item label={`Research`} name=\"research\">\n              <Select\n                options={[\n                  {\n                    value: 'orc',\n                    label: `Orc Diversification`,\n                  },\n                  {\n                    value: 'unpeople',\n                    label: `Unpeople Transformation`,\n                  },\n                  {\n                    value: 'purity',\n                    label: `Purity Magic`,\n                  },\n                  {\n                    value: 'defense',\n                    label: `Base Defense`,\n                  },\n                ].filter(({ value }) => value !== previousResearch)}\n              />\n            </Form.Item>\n            <Mandatory form={form} purchased={purchasedInvestments} />\n            <Banned\n              purchased={[...purchasedInvestments, ...mandatory]}\n              form={form}\n            />\n            <Extra />\n          </div>\n          <Headquarters\n            research={previousResearch}\n            military={military}\n            magic={magic}\n          />\n        </div>\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            {`Submit`}\n          </Button>\n        </Form.Item>\n      </Card>\n    </Form>\n  );\n};\n\nexport default CustomForm;\n","import Addition from '../../results/Addition';\nimport { roundTwoChanges } from '../../data/givini';\n\nconst Givini = ({\n  initialStandings,\n  roundTwoInvestments = [],\n  decisions = {},\n}) => {\n  return (\n    <Addition\n      startingValue={initialStandings.givini}\n      dataSources={[\n        {\n          title: `Investments`,\n          dataSource: roundTwoInvestments\n            .filter(({ givini = 0 }) => givini !== 0)\n            .map(({ name, givini }) => {\n              return { label: name, values: [givini] };\n            })\n            .sort(({ label: a }, { label: b }) => a.localeCompare(b)),\n        },\n        {\n          title: `Other changes`,\n          dataSource: roundTwoChanges(decisions, initialStandings.investments),\n        },\n      ]}\n    />\n  );\n};\n\nexport default Givini;\n","import Addition from '../../results/Addition';\nimport { roundTwoChanges, council } from '../../data/takkan';\nimport { Typography } from 'antd';\n\nconst { Text } = Typography;\n\nconst Takkan = ({\n  initialStandings,\n  roundTwoInvestments = [],\n  decisions = {},\n  roundOneResearch,\n  takkanScore,\n}) => {\n  const startingValue = initialStandings.takkan;\n  const previousInvestments = initialStandings.investments;\n\n  const councilResult = council({\n    researches: [roundOneResearch],\n    investments: [\n      ...previousInvestments,\n      ...roundTwoInvestments.map(({ name }) => name),\n    ],\n    takkan: takkanScore,\n  });\n\n  return (\n    <>\n      <Addition\n        startingValue={startingValue}\n        dataSources={[\n          {\n            title: `Investments`,\n            dataSource: roundTwoInvestments\n              .filter(({ takkan = 0 }) => takkan !== 0)\n              .map(({ name, takkan }) => {\n                return { label: name, values: [takkan] };\n              })\n              .sort(({ label: a }, { label: b }) => a.localeCompare(b)),\n          },\n          {\n            title: `Other changes`,\n            dataSource: roundTwoChanges(decisions, previousInvestments),\n          },\n        ]}\n      />\n      <Text>\n        {`Orc council: `}\n        <Text type={councilResult >= 0.8 ? 'success' : 'warning'}>\n          {(councilResult * 100).toFixed(2)}\n          {`%`}\n        </Text>\n      </Text>\n    </>\n  );\n};\n\nexport default Takkan;\n","import Addition from '../../results/Addition';\nimport { roundTwoChanges } from '../../data/chalice';\n\nconst Chalice = ({\n  initialStandings,\n  roundTwoInvestments = [],\n  decisions = {},\n}) => {\n  return (\n    <Addition\n      startingValue={initialStandings.chalice}\n      dataSources={[\n        {\n          title: `Investments`,\n          dataSource: roundTwoInvestments\n            .filter(({ chalice = 0 }) => chalice !== 0)\n            .map(({ name, chalice }) => {\n              return { label: name, values: [chalice] };\n            })\n            .sort(({ label: a }, { label: b }) => a.localeCompare(b)),\n        },\n        {\n          title: `Other changes`,\n          dataSource: roundTwoChanges(decisions, initialStandings.investments),\n        },\n      ]}\n    />\n  );\n};\n\nexport default Chalice;\n","import Ledger from '../../results/Ledger';\nimport { Card } from 'antd';\nimport Givini from './Givini';\nimport Takkan from './Takkan';\nimport Chalice from './Chalice';\n\nconst Result = ({\n  initialStandings,\n  nonInvestmentChanges,\n  investmentChanges,\n  decisions,\n  roundOneDecisions,\n}) => {\n  return (\n    <Card title={`Changes`} className=\"results\">\n      <Ledger\n        initialStandings={initialStandings}\n        nonInvestmentChanges={nonInvestmentChanges}\n        investmentChanges={investmentChanges}\n      />\n      <div>\n        <Card title={`New Givini`} type=\"inner\">\n          <Givini\n            initialStandings={initialStandings}\n            roundTwoInvestments={investmentChanges.investments}\n            decisions={decisions}\n          />\n        </Card>\n        <Card title={`Tak'Kan`} type=\"inner\">\n          <Takkan\n            initialStandings={initialStandings}\n            roundTwoInvestments={investmentChanges.investments}\n            decisions={decisions}\n            takkanScore={initialStandings.takkan + investmentChanges.takkan}\n            roundOneResearch={roundOneDecisions.research}\n          />\n        </Card>\n        <Card title={`Chalice States`} type=\"inner\">\n          <Chalice\n            initialStandings={initialStandings}\n            roundTwoInvestments={investmentChanges.investments}\n            decisions={decisions}\n          />\n        </Card>\n      </div>\n    </Card>\n  );\n};\n\nexport default Result;\n","import Form from './Form';\nimport { buildFinalStandings } from '../misc';\nimport Result from './results';\nimport { roundTwoValue as giviniRoundTwoValue } from '../data/givini';\nimport { price as headquartersPrice } from './Headquarters';\nimport { roundTwoValue as takkanRoundTwoValue } from '../data/takkan';\nimport { Typography } from 'antd';\nimport ScrollTo from '../results/ScrollTo';\nimport { roundTwoValue as chaliceRoundTwoValue } from '../data/chalice';\n\nconst { Title } = Typography;\n\nconst shadowBans = ['Aram Eustrin Embassy'];\n\nconst socialRequirement = (initialSocial, decisions) => {\n  if (decisions.merchantSolution2 === 'neutral' && initialSocial < 40) {\n    return 40 - initialSocial;\n  }\n\n  return 0;\n};\n\nconst onFinish = async ({\n  setResult,\n  runInWoker,\n  setError,\n  firstRoundResult,\n  values,\n}) => {\n  const { finalStandings: initialStandings, misc } = firstRoundResult;\n\n  const {\n    merchantSolution2,\n    headquarters,\n    orcCouncil,\n    mandatory,\n    banned,\n    research,\n    spending,\n  } = values;\n  const decisions = { merchantSolution2, headquarters, orcCouncil, research };\n\n  const [military, magic] = decisions.headquarters\n    .split('/')\n    .map((x) => parseInt(x));\n  const headquartersUpgradesPrice = headquartersPrice({\n    research: firstRoundResult.decisions.research,\n    military,\n    magic,\n  });\n\n  const pronNote = 2500;\n\n  const nonInvestmentChangesList = [\n    {\n      name: `Headquarters upgrades`,\n      money: -headquartersUpgradesPrice,\n    },\n    !!spending && {\n      name: `Other spending`,\n      money: -spending,\n    },\n    {\n      name: `Tower's chest ProN note`,\n      money: pronNote,\n    },\n  ].filter(Boolean);\n\n  const nonInvestmentChanges = {\n    money: nonInvestmentChangesList.reduce(\n      (acc, { money = 0 }) => acc + money,\n      0\n    ),\n    profits: 0,\n    social: 0,\n    givini: giviniRoundTwoValue(decisions, initialStandings.investments),\n    takkan: takkanRoundTwoValue(decisions, initialStandings.investments),\n    chalice: chaliceRoundTwoValue(decisions, initialStandings.investments),\n    list: nonInvestmentChangesList,\n  };\n\n  const params = {\n    ...misc,\n    previousInvestments: initialStandings.investments,\n    money:\n      initialStandings.money +\n      initialStandings.profits +\n      (nonInvestmentChanges.money - pronNote),\n    giviniStart: initialStandings.givini,\n    giviniExtra: nonInvestmentChanges.givini,\n    takkan: initialStandings.takkan,\n    completedResearch: [firstRoundResult.decisions.research],\n    otherRequirements: {\n      social: socialRequirement(initialStandings.social, decisions),\n      orcCouncil: decisions.orcCouncil,\n      mandatory,\n      banned: [...shadowBans, ...banned],\n    },\n  };\n\n  const result = await runInWoker(params);\n\n  if (!result) {\n    setResult(undefined);\n    setError(\n      `Couldn't find a working combination of investments for that strategy with these starting values, sorry.`\n    );\n    return;\n  }\n\n  const investmentChanges = { ...result, money: -result.price };\n\n  setResult({\n    initialStandings,\n    decisions,\n    nonInvestmentChanges,\n    investmentChanges,\n    finalStandings: buildFinalStandings({\n      initialStandings,\n      nonInvestmentChanges,\n      investmentChanges,\n    }),\n    misc,\n  });\n  setError(undefined);\n};\n\nconst SecondRound = ({\n  runInWoker,\n  loading,\n  result,\n  setResult,\n  setError,\n  firstRoundResult,\n}) => {\n  return (\n    <div className=\"round-two\">\n      <Title level={2}>{`Chapter 4 – Round 2`}</Title>\n      <Form\n        onFinish={(values) => {\n          onFinish({\n            setResult,\n            runInWoker,\n            setError,\n            firstRoundResult,\n            values,\n          });\n        }}\n        loading={loading}\n        firstRoundDecisions={firstRoundResult.decisions}\n        purchasedInvestments={firstRoundResult.finalStandings.investments}\n      />\n      <ScrollTo data={result}>\n        <Result roundOneDecisions={firstRoundResult.decisions} {...result} />\n      </ScrollTo>\n    </div>\n  );\n};\n\nexport default SecondRound;\n","import { useEffect, useState } from 'react';\nimport {\n  Form,\n  Card,\n  Radio,\n  Select,\n  Button,\n  Alert,\n  InputNumber,\n  Divider,\n} from 'antd';\nimport preGawnfallInvestments, {\n  postGawnfallInvestments,\n} from '../data/investments';\nimport Mandatory from '../components/form/Mandatory';\nimport Banned from '../components/form/Banned';\nimport { nF } from '../misc';\nimport Extra from '../components/form/Extra';\n\nconst initialValues = {\n  mandatory1: ['Givini Tunnels'],\n  yelarel: 'min',\n  gawnfallTakkan: 'major',\n  gawnfallMercantile: 'excellent',\n  gawnfallArdford: 'resolved',\n  gawnfallMother: 'full_unlock',\n  vera: true,\n  merchantSolution3: 'neutral',\n  mandatory: [],\n  banned: [],\n  gawnfallHigh: 'herin_overwhelming',\n  reserves: 5000000 + 125000 + 250000,\n  extra_reserves: 0,\n  spending: 0,\n};\n\nconst WarInvestments = ({ purchased, frontName, investments }) => {\n  const missing = investments.filter((inv) => !purchased.includes(inv));\n\n  if (missing.length === 0) {\n    return null;\n  }\n\n  return (\n    <Alert\n      message={\n        <>\n          {`You have yet to purchase the following investment${\n            missing.length > 1 ? `s` : ''\n          }, possibly relevant on the ${frontName} front of the upcoming Erosian War: `}\n          <strong>{missing.join(', ')}</strong>\n        </>\n      }\n      type=\"info\"\n      showIcon\n      className=\"war-related-investments\"\n    />\n  );\n};\n\nconst GhenaleseWarInvestments = ({ purchased }) => {\n  return (\n    <WarInvestments\n      purchased={purchased}\n      frontName={`Ghenalese`}\n      investments={[\n        'Givini Mage Guild',\n        'Mercenary Offices',\n        'Stineford Succubus Tower',\n        'War Monument',\n      ]}\n    />\n  );\n};\n\nconst ErosianWarInvestments = ({ purchased }) => {\n  return (\n    <WarInvestments\n      purchased={purchased}\n      frontName={`Erosian`}\n      investments={[\n        'Gasm Falls Orc Tunnels',\n        'Gasm Falls Water Cleanup',\n        'Lustlord Temples',\n        'Orc Pools Upgrade',\n        'Orcish Democracy',\n        \"Tarran'Kan Housing + Tarran'Kan Trade Upgrade\",\n      ]}\n    />\n  );\n};\n\nconst CustomForm = ({\n  previousInvestments,\n  previousResearch,\n  onFinish,\n  loading,\n  merchantSolution,\n}) => {\n  const [form] = Form.useForm();\n  const [mandatory1, setMandatory1] = useState(initialValues.mandatory1);\n  const [mandatory, setMandatory] = useState(initialValues.mandatory);\n  const [lockedInvestments, setLockedInvestments] = useState([]);\n\n  useEffect(() => {\n    form.setFieldsValue({\n      mandatory1: form\n        .getFieldValue('mandatory1')\n        .filter((inv) => !previousInvestments.includes(inv)),\n    });\n  }, [form, previousInvestments]);\n\n  const availableResearch = [\n    {\n      value: 'orc',\n      label: `Orc Diversification`,\n    },\n    {\n      value: 'unpeople',\n      label: `Unpeople Transformation`,\n    },\n    {\n      value: 'purity',\n      label: `Purity Magic`,\n    },\n    {\n      value: 'defense',\n      label: `Base Defense`,\n    },\n  ].filter(({ value }) => !previousResearch.includes(value));\n  useEffect(() => {\n    form.setFieldsValue({\n      research: availableResearch[0]['value'],\n    });\n  }, [form, availableResearch]);\n\n  return (\n    <Form\n      initialValues={initialValues}\n      className=\"round-form third-round-form\"\n      form={form}\n      onFinish={onFinish}\n      onValuesChange={(_, allValues) => {\n        setMandatory1(\n          [\n            ...allValues.mandatory1,\n            allValues.yelarel === 'max' && 'Lustlord Temples',\n          ].filter(Boolean)\n        );\n        setMandatory(allValues.mandatory);\n        setLockedInvestments(\n          postGawnfallInvestments\n            .filter(({ name, price }) => {\n              if (previousInvestments.includes(name)) {\n                return false;\n              }\n              if (typeof price !== 'function') {\n                return false;\n              }\n              return price(allValues) === Infinity;\n            })\n            .map(({ name }) => name)\n        );\n      }}\n    >\n      <Card title={`Gawnfall`} type=\"inner\" className=\"gawnfall\">\n        <div className=\"two-columns\">\n          <Card title={`Strategy`} type=\"inner\">\n            {!merchantSolution && (\n              <Form.Item label={`Merchant dispute`} name=\"merchantSolution3\">\n                <Select\n                  options={[\n                    {\n                      value: 'neutral',\n                      label: `Neutral compromise (force Social ≥ 40)`,\n                    },\n                    {\n                      value: 'givini',\n                      label: `Favor New Givini`,\n                    },\n                    {\n                      value: 'wait',\n                      label: `Wait`,\n                    },\n                  ]}\n                />\n              </Form.Item>\n            )}\n            <Form.Item label={`Research`} name=\"research\">\n              <Select options={availableResearch} />\n            </Form.Item>\n            {!previousInvestments.includes('Lustlord Temples') && (\n              <Form.Item label={`Yelarel-related investments`} name=\"yelarel\">\n                <Select\n                  options={[\n                    {\n                      value: 'none',\n                      label: `Don't invest in the Lustlord cult`,\n                    },\n                    {\n                      value: 'min',\n                      label: `Pay ${nF(50000)} ProN for New Lustlord Statues`,\n                    },\n                    {\n                      value: 'max',\n                      label: `Invest a total of ${nF(\n                        800000\n                      )} ProN in the Lustlord Temples`,\n                    },\n                  ]}\n                />\n              </Form.Item>\n            )}\n            <Form.Item\n              label={`Buy the Goddess of Magic Statue for ${nF(10000)} ProN?`}\n              name=\"vera\"\n            >\n              <Radio.Group\n                options={[\n                  {\n                    value: true,\n                    label: `Yes`,\n                  },\n                  {\n                    value: false,\n                    label: `No`,\n                  },\n                ]}\n              />\n            </Form.Item>\n            <Form.Item\n              label={`Other investments you wish to do before the Council`}\n              name=\"mandatory1\"\n            >\n              <Select\n                options={preGawnfallInvestments\n                  .filter(\n                    ({ name }) =>\n                      !previousInvestments.includes(name) &&\n                      'Lustlord Temples' !== name\n                  )\n                  .map(({ name }) => {\n                    return { label: name, value: name };\n                  })}\n                mode=\"multiple\"\n              />\n            </Form.Item>\n          </Card>\n          <Card title={`Investments-related results`} type=\"inner\">\n            <Alert\n              message={`Only the Succubi Accepted path is supported as of now.`}\n              type=\"warning\"\n              showIcon\n            />\n            <Form.Item label={`Support for Tak'Kan`} name=\"gawnfallTakkan\">\n              <Select\n                options={[\n                  {\n                    value: 'major',\n                    label: `Major`,\n                  },\n                  {\n                    value: 'minor',\n                    label: `Minor`,\n                  },\n                  {\n                    value: 'none',\n                    label: `None`,\n                  },\n                ]}\n              />\n            </Form.Item>\n            <Form.Item label={`Promotion vote`} name=\"gawnfallHigh\">\n              <Select\n                options={[\n                  {\n                    value: 'herin_overwhelming',\n                    label: `Overwhelming victory for Herin`,\n                  },\n                  {\n                    value: 'herin_promoted',\n                    label: `Herin promoted`,\n                  },\n                  {\n                    value: 'kaskia_promoted',\n                    label: `Kaskia promoted`,\n                  },\n                  {\n                    value: 'kaskia_overwhelming',\n                    label: `Overwhelming victory for Kaskia`,\n                  },\n                ]}\n              />\n            </Form.Item>\n            <Form.Item\n              label={`Mercantile issue resolution`}\n              name=\"gawnfallMercantile\"\n            >\n              <Select\n                options={[\n                  {\n                    value: 'excellent',\n                    label: `Excellent`,\n                  },\n                  {\n                    value: 'good',\n                    label: `Good`,\n                  },\n                  {\n                    value: 'fair',\n                    label: `Fair`,\n                  },\n                  {\n                    value: 'poor',\n                    label: `Poor`,\n                  },\n                ]}\n              />\n            </Form.Item>\n            <Form.Item label={`Ardford's ban`} name=\"gawnfallArdford\">\n              <Select\n                options={[\n                  {\n                    value: 'overkill',\n                    label: `Lifted, with an extra bit of acceptance`,\n                  },\n                  {\n                    value: 'resolved',\n                    label: `Lifted`,\n                  },\n                  {\n                    value: 'unresolved',\n                    label: `Unsolved`,\n                  },\n                ]}\n              />\n            </Form.Item>\n            <Form.Item label={`Mother's Guard`} name=\"gawnfallMother\">\n              <Select\n                options={[\n                  {\n                    value: 'full_unlock',\n                    label: `Crushed`,\n                  },\n                  {\n                    value: 'partial_unlock',\n                    label: `Dealt with`,\n                  },\n                  {\n                    value: 'locked',\n                    label: `Unrestrained`,\n                  },\n                ]}\n              />\n            </Form.Item>\n          </Card>\n        </div>\n      </Card>\n      <Card title={`Post Gawnfall`} type=\"inner\">\n        <div className=\"reserves\">\n          <Form.Item\n            label={`Keep enough cash in reserve, if need be, to:`}\n            name=\"reserves\"\n          >\n            <Select\n              options={[\n                {\n                  label: `Open the ruins after the war`,\n                  value: 0,\n                },\n                {\n                  label: `Open the ruins before the war (${nF(5000000)} ProN)`,\n                  value: 5000000,\n                },\n                {\n                  label: `Open the ruins and buy everything but the Smithing in Kyangan (${nF(\n                    5000000 + 125000\n                  )} ProN)`,\n                  value: 5000000 + 125000,\n                },\n                {\n                  label: `Open the ruins and buy everything in Kyangan (${nF(\n                    5000000 + 125000 + 250000\n                  )} ProN)`,\n                  value: 5000000 + 125000 + 250000,\n                },\n              ]}\n            />\n          </Form.Item>\n          <Form.Item\n            label={`Also make sure to have the additional amount available`}\n            name=\"extra_reserves\"\n            tooltip={\n              <>\n                {`For extra expanses not covered in the previous option.`}\n                <br />\n                {`For example, if you also plan to buy Armory Upgrade and Entity's Shield Upgrade before the war, enter their total cost i.e. 260000.`}\n              </>\n            }\n          >\n            <InputNumber />\n          </Form.Item>\n        </div>\n        <Divider />\n        <Mandatory\n          form={form}\n          purchased={[\n            ...previousInvestments,\n            ...mandatory1,\n            ...lockedInvestments,\n          ]}\n          list=\"gawnfall\"\n        />\n        <GhenaleseWarInvestments\n          purchased={[\n            ...previousInvestments,\n            ...mandatory1,\n            ...mandatory,\n            ...lockedInvestments,\n          ]}\n        />\n        <ErosianWarInvestments\n          purchased={[\n            ...previousInvestments,\n            ...mandatory1,\n            ...mandatory,\n            ...lockedInvestments,\n          ]}\n        />\n        <Banned\n          form={form}\n          purchased={[\n            ...previousInvestments,\n            ...mandatory1,\n            ...mandatory,\n            ...lockedInvestments,\n          ]}\n          list=\"gawnfall\"\n        />\n        <Extra />\n      </Card>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n          {`Submit`}\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default CustomForm;\n","import Ledger from '../results/Ledger';\nimport { Card } from 'antd';\nimport Addition from '../results/Addition';\nimport { roundThreeChanges as giviniRoundThreeChanges } from '../data/givini';\nimport { roundThreeChanges as takkanRoundThreeChanges } from '../data/takkan';\nimport { roundThreeChanges as chaliceRoundThreeChanges } from '../data/chalice';\n\nconst filterInvestmentsByCountry = (investments, country) => {\n  return investments\n    .filter((inv) => !!inv[country])\n    .map((inv) => {\n      return { label: inv['name'], values: [inv[country]] };\n    })\n    .sort(({ label: a }, { label: b }) => a.localeCompare(b));\n};\n\nconst Result = ({\n  initialStandings,\n  nonInvestmentChanges,\n  investmentChanges,\n  decisions,\n}) => {\n  const investments = investmentChanges.investments;\n\n  return (\n    <Card title={`Changes`} className=\"results\">\n      <Ledger\n        initialStandings={initialStandings}\n        nonInvestmentChanges={nonInvestmentChanges}\n        investmentChanges={investmentChanges}\n      />\n      <div>\n        <Card title={`New Givini`} type=\"inner\">\n          <Addition\n            startingValue={initialStandings.givini}\n            dataSources={[\n              {\n                title: `Investments`,\n                dataSource: filterInvestmentsByCountry(investments, 'givini'),\n              },\n              {\n                title: `Other changes`,\n                dataSource: giviniRoundThreeChanges(\n                  decisions,\n                  initialStandings.investments\n                ),\n              },\n            ]}\n          />\n        </Card>\n        <Card title={`Tak'Kan`} type=\"inner\">\n          <Addition\n            startingValue={initialStandings.takkan}\n            dataSources={[\n              {\n                title: `Investments`,\n                dataSource: filterInvestmentsByCountry(investments, 'takkan'),\n              },\n              {\n                title: `Other changes`,\n                dataSource: takkanRoundThreeChanges(\n                  decisions,\n                  initialStandings.investments\n                ),\n              },\n            ]}\n          />\n        </Card>\n        <Card title={`Chalice States`} type=\"inner\">\n          <Addition\n            startingValue={initialStandings.chalice}\n            dataSources={[\n              {\n                title: `Investments`,\n                dataSource: filterInvestmentsByCountry(investments, 'chalice'),\n              },\n              {\n                title: `Other changes`,\n                dataSource: chaliceRoundThreeChanges(\n                  decisions,\n                  initialStandings.investments\n                ),\n              },\n            ]}\n          />\n        </Card>\n      </div>\n    </Card>\n  );\n};\n\nexport default Result;\n","import Form from './Form';\nimport { Typography } from 'antd';\nimport { buildFinalStandings } from '../misc';\nimport Result from './Result';\nimport ScrollTo from '../results/ScrollTo';\nimport { roundThreeValue as giviniRoundThreeValue } from '../data/givini';\nimport { roundThreeValue as takkanRoundThreeValue } from '../data/takkan';\nimport investmentsList from '../data/investments';\nimport { roundThreeValue as chaliceRoundThreeValue } from '../data/chalice';\n\nconst { Title } = Typography;\n\nconst shadowBans = [\n  'Orcish Drake Statue + Orcish Gargoyle Statue + Orcish Golden Drake Statue',\n  'Aram Eustrin Embassy',\n];\n\nconst gawnfallSocial = ({ gawnfallMother, gawnfallHigh }) => {\n  let social = 0;\n\n  if (gawnfallMother === 'full_unlock') {\n    social += 2;\n  }\n  if (gawnfallMother === 'partial_unlock') {\n    social += 1;\n  }\n  if (gawnfallHigh === 'herin_overwhelming') {\n    social += 1;\n  }\n  if (gawnfallHigh === 'kaskia_overwhelming') {\n    social -= 1;\n  }\n\n  return social;\n};\n\nconst ardfordOpen = (decisions) =>\n  ['resolved', 'overkill'].includes(decisions.gawnfallArdford);\n\nconst preInvestmentsOrii = ({ decisions, initialStandings }) => {\n  return (\n    ardfordOpen(decisions) &&\n    initialStandings.investments.includes('Ardford Restaurant') &&\n    initialStandings.investments.includes('Givini Teahouse Chain')\n  );\n};\n\nconst preInvestmentsTradesmasher = ({ decisions, initialStandings }) => {\n  return (\n    initialStandings.investments.includes(\"Tradesmasher's Guild\") &&\n    decisions.gawnfallTakkan === 'major'\n  );\n};\n\nconst pastInvestmentsUpdate = ({\n  decisions,\n  initialStandings,\n  investmentChanges,\n}) => {\n  let total = 0;\n  if (preInvestmentsOrii({ decisions, initialStandings })) {\n    total += 15000;\n  }\n  if (preInvestmentsTradesmasher({ decisions, initialStandings })) {\n    const tradesmasherProfits = investmentsList.find(\n      ({ name }) => name === \"Tradesmasher's Guild\"\n    ).profits;\n    total +=\n      tradesmasherProfits({\n        investments: investmentChanges.investments,\n        previousInvestments: initialStandings.investments,\n        gawnfallTakkan: 'major',\n      }) -\n      tradesmasherProfits({\n        investments: investmentChanges.investments,\n        previousInvestments: initialStandings.investments,\n      });\n  }\n\n  return total;\n};\n\nconst projectedPastInvestmentsUpdate = ({ decisions, initialStandings }) => {\n  let total = 0;\n\n  if (preInvestmentsOrii({ decisions, initialStandings })) {\n    total += 15000;\n  }\n\n  if (preInvestmentsTradesmasher({ decisions, initialStandings })) {\n    // Could _technically_ be 50000\n    // In which case the optimization algorithm would also underestimate the importance of Tradesmasher-related investments for this iteration\n    // But that would require not having (at least) the Givini Orc Merchant and Lonely Sailor Services at this point\n    // So so unlikely I'm shrugging it off\n    total += 25000;\n  }\n\n  return total;\n};\n\nconst onFinish = async ({\n  runInWoker,\n  setResult,\n  setError,\n  secondRoundResult,\n  values,\n}) => {\n  const { finalStandings: initialStandings } = secondRoundResult;\n\n  const {\n    research,\n    mandatory1,\n    yelarel,\n    gawnfallTakkan,\n    gawnfallMercantile,\n    gawnfallArdford,\n    gawnfallMother,\n    vera,\n    merchantSolution3,\n    mandatory: mandatory2,\n    banned,\n    gawnfallHigh,\n    reserves,\n    extra_reserves,\n    spending,\n  } = values;\n  const decisions = {\n    research,\n    gawnfallTakkan,\n    gawnfallMercantile,\n    gawnfallArdford,\n    gawnfallMother,\n    merchantSolution3,\n    gawnfallHigh,\n    lustlordStatuesBought: yelarel === 'min',\n  };\n\n  const earlyArchives = mandatory1.includes('Denmiel Archives');\n  const earlyHousing = mandatory1.includes(\n    \"Tarran'Kan Housing + Tarran'Kan Trade Upgrade\"\n  );\n  let mandatory = [\n    ...mandatory1.filter(\n      (name) =>\n        ![\n          'Denmiel Archives',\n          \"Tarran'Kan Housing + Tarran'Kan Trade Upgrade\",\n        ].includes(name)\n    ),\n    ...mandatory2,\n  ];\n  if (yelarel === 'max') {\n    mandatory.push('Lustlord Temples');\n  }\n\n  const misc = {\n    ...secondRoundResult.misc,\n    gawnfallTakkan,\n    gawnfallMother,\n    gawnfallArdford,\n    lustlordStatuesBought: decisions.lustlordStatuesBought,\n  };\n\n  const mercantileMoney = (() => {\n    switch (decisions.gawnfallMercantile) {\n      case 'excellent':\n        return 250000;\n      case 'good':\n        return 100000;\n      case 'poor':\n        return -100000;\n      default:\n        return 0;\n    }\n  })();\n\n  const nonInvestmentChangesList = [\n    yelarel === 'min' && {\n      name: `New Lustlord Statues`,\n      money: -50000,\n    },\n    vera && {\n      name: `Goddess of Magic Statue`,\n      money: -10000,\n    },\n    {\n      name: `Gawnfall social influence`,\n      social: gawnfallSocial(decisions),\n    },\n    {\n      name: `One-time mercantile issue modifier`,\n      money: mercantileMoney,\n    },\n    !!spending && {\n      name: `Other spending`,\n      money: -spending,\n    },\n  ].filter(Boolean);\n\n  const nonInvestmentChanges = {\n    money: nonInvestmentChangesList.reduce(\n      (acc, { money }) => acc + (money || 0),\n      0\n    ),\n    profits: 0,\n    social: nonInvestmentChangesList.reduce(\n      (acc, { social }) => acc + (social || 0),\n      0\n    ),\n    givini: giviniRoundThreeValue(decisions, initialStandings.investments),\n    takkan: takkanRoundThreeValue(decisions, initialStandings.investments),\n    chalice: chaliceRoundThreeValue(decisions, initialStandings.investments),\n    list: nonInvestmentChangesList,\n  };\n\n  let reserve = reserves + extra_reserves - initialStandings.profits;\n  reserve -= mercantileMoney;\n  reserve -= projectedPastInvestmentsUpdate({ decisions, initialStandings });\n  if (earlyArchives) {\n    reserve -= 20000;\n  }\n  if (earlyHousing) {\n    reserve -= 100000;\n  }\n\n  const params = {\n    ...misc,\n    previousInvestments: initialStandings.investments,\n    money:\n      initialStandings.money +\n      initialStandings.profits +\n      (nonInvestmentChanges.money - mercantileMoney) -\n      (earlyArchives ? 250000 : 0) -\n      (earlyHousing ? 1000000 + 100000 : 0),\n    giviniStart: initialStandings.givini,\n    giviniExtra: nonInvestmentChanges.givini,\n    otherRequirements: {\n      mandatory,\n      banned: [\n        ...shadowBans,\n        ...banned,\n        earlyArchives && 'Denmiel Archives',\n        earlyHousing && \"Tarran'Kan Housing + Tarran'Kan Trade Upgrade\",\n      ].filter(Boolean),\n      social:\n        decisions.merchantSolution3 === 'neutral'\n          ? Math.max(40 - initialStandings.social, 0)\n          : 0,\n      reserve,\n    },\n    list: 'gawnfall',\n  };\n\n  const result = await runInWoker(params);\n\n  if (!result) {\n    setResult(undefined);\n    setError(\n      `Couldn't find a working combination of investments for that strategy with these starting values, sorry.`\n    );\n    return;\n  }\n\n  const investmentChanges = { ...result, money: -result.price };\n\n  investmentChanges.profits += pastInvestmentsUpdate({\n    decisions,\n    initialStandings,\n    investmentChanges,\n  });\n\n  if (earlyArchives) {\n    investmentChanges.price += 250000;\n    investmentChanges.money -= 250000;\n    investmentChanges.profits += 20000;\n    investmentChanges.social += 1;\n    investmentChanges.investments.push({\n      name: 'Denmiel Archives',\n      price: 250000,\n      profits: 20000,\n      social: 1,\n    });\n  }\n  if (earlyHousing) {\n    investmentChanges.price += 1000000 + 100000;\n    investmentChanges.money -= 1000000 + 100000;\n    investmentChanges.profits += 50000 + 50000;\n    investmentChanges.social += 1;\n    investmentChanges.investments.push({\n      name: \"Tarran'Kan Housing + Tarran'Kan Trade Upgrade\",\n      price: 1000000 + 100000,\n      profits: 50000 + 50000,\n      social: 1,\n      takkan: 5 + 2,\n    });\n  }\n\n  // Orri's Social\n  const allInvestments = [\n    ...initialStandings.investments,\n    ...investmentChanges.investments.map(({ name }) => name),\n  ];\n  if (\n    preInvestmentsOrii({ decisions, initialStandings }) ||\n    // TODO Find a clean way to update this on each following iteration\n    (ardfordOpen(decisions) &&\n      allInvestments.includes('Ardford Restaurant') &&\n      allInvestments.includes('Givini Teahouse Chain'))\n  ) {\n    nonInvestmentChanges.list.push({\n      name: `Orri's Quest`,\n      social: 1,\n    });\n  }\n\n  setResult({\n    initialStandings,\n    decisions,\n    nonInvestmentChanges,\n    investmentChanges,\n    finalStandings: buildFinalStandings({\n      initialStandings,\n      nonInvestmentChanges,\n      investmentChanges,\n    }),\n    misc,\n  });\n  setError(undefined);\n};\n\nconst ThirdRound = ({\n  firstRoundResult,\n  secondRoundResult,\n  runInWoker,\n  loading,\n  setResult,\n  setError,\n  result,\n}) => {\n  const previousInvestments = secondRoundResult.finalStandings.investments;\n  const previousResearch = [\n    firstRoundResult.decisions.research,\n    secondRoundResult.decisions.research,\n  ];\n  const merchantSolution = (() => {\n    if (firstRoundResult.decisions.merchantSolution !== 'wait') {\n      return firstRoundResult.decisions.merchantSolution;\n    }\n\n    if (secondRoundResult.decisions.merchantSolution2 !== 'wait') {\n      return secondRoundResult.decisions.merchantSolution2;\n    }\n\n    return undefined;\n  })();\n\n  return (\n    <div className=\"round-three\">\n      <Title level={2}>{`Chapter 4 – Round 3`}</Title>\n      <Form\n        previousInvestments={previousInvestments}\n        previousResearch={previousResearch}\n        onFinish={(values) => {\n          onFinish({\n            runInWoker,\n            setResult,\n            setError,\n            secondRoundResult,\n            values,\n          });\n        }}\n        loading={loading}\n        merchantSolution={merchantSolution}\n      />\n      <ScrollTo data={result}>\n        <Result {...result} />\n      </ScrollTo>\n    </div>\n  );\n};\n\nexport default ThirdRound;\n","import './App.css';\nimport FirstRound from './first-round';\nimport { useEffect, useState } from 'react';\nimport worker from 'workerize-loader!./worker'; // eslint-disable-line import/no-webpack-loader-syntax\nimport Disclaimer from './Disclaimer';\nimport Loading from './Loading';\nimport Failure from './Failure';\nimport SecondRound from './second-round';\nimport ThirdRound from './third-round';\n\nlet dumbCache = {};\nconst dumbKey = (params) => JSON.stringify(params);\n\nconst buildRunInWorker =\n  ({\n    workerInstance,\n    setLoading,\n    setCombinationsCount,\n    setProgress,\n    setInvestmentsCount,\n    setPreprogress,\n  }) =>\n  async (params) => {\n    const cacheKey = dumbKey(params);\n    if (!!dumbCache[cacheKey]) {\n      return dumbCache[cacheKey];\n    }\n\n    setLoading(true);\n\n    const investmentsCount = await workerInstance.prepare(params);\n    setInvestmentsCount(investmentsCount);\n    setPreprogress(0);\n    let combinationsCount = 0;\n    for (let i = 0; i <= investmentsCount; i++) {\n      combinationsCount += await workerInstance.preprocess();\n      setPreprogress(i / investmentsCount);\n    }\n\n    setCombinationsCount(combinationsCount);\n    setProgress(0);\n    const batchSize = 10000;\n    let result;\n    for (let i = 0; i < Math.ceil(combinationsCount / batchSize); i++) {\n      const end = Math.min((i + 1) * batchSize, combinationsCount);\n      result = await workerInstance.process(i * batchSize, end);\n      setProgress(end / combinationsCount);\n    }\n\n    await workerInstance.clean();\n\n    setLoading(false);\n    setCombinationsCount(undefined);\n    setInvestmentsCount(undefined);\n    setProgress(0);\n    setPreprogress(0);\n\n    dumbCache[cacheKey] = result;\n\n    return result;\n  };\n\nconst App = () => {\n  const [workerInstance, setWorkerInstance] = useState();\n  const [loading, setLoading] = useState(false);\n  const [combinationsCount, setCombinationsCount] = useState();\n  const [progress, setProgress] = useState(0);\n  const [investmentsCount, setInvestmentsCount] = useState();\n  const [preprogress, setPreprogress] = useState(0);\n\n  const [firstRoundResult, setFirstRoundResult] = useState();\n  const [secondRoundResult, setSecondRoundResult] = useState();\n  const [thirdRoundResult, setThirdRoundResult] = useState();\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    if (!workerInstance) {\n      setWorkerInstance(worker());\n    }\n\n    return () => {\n      workerInstance?.terminate();\n    };\n  }, [workerInstance]);\n\n  if (!workerInstance) {\n    return null;\n  }\n\n  const runInWoker = buildRunInWorker({\n    workerInstance,\n    setLoading,\n    setCombinationsCount,\n    setProgress,\n    setInvestmentsCount,\n    setPreprogress,\n  });\n\n  const abort = async () => {\n    workerInstance.terminate();\n\n    const newWorkerInstance = worker();\n    await newWorkerInstance.clean();\n\n    setWorkerInstance(newWorkerInstance);\n\n    setCombinationsCount(undefined);\n    setInvestmentsCount(undefined);\n    setProgress(0);\n    setPreprogress(0);\n\n    setLoading(false);\n  };\n\n  return (\n    <div>\n      <Disclaimer />\n      <FirstRound\n        runInWoker={runInWoker}\n        loading={loading}\n        result={firstRoundResult}\n        setResult={(data) => {\n          setSecondRoundResult(undefined);\n          setThirdRoundResult(undefined);\n          setFirstRoundResult(data);\n        }}\n        setError={(error) => {\n          setSecondRoundResult(undefined);\n          setThirdRoundResult(undefined);\n          setError(error);\n        }}\n      />\n      {firstRoundResult && (\n        <SecondRound\n          runInWoker={runInWoker}\n          loading={loading}\n          result={secondRoundResult}\n          setResult={(data) => {\n            setThirdRoundResult(undefined);\n            setSecondRoundResult(data);\n          }}\n          setError={(error) => {\n            setThirdRoundResult(undefined);\n            setError(error);\n          }}\n          firstRoundResult={firstRoundResult}\n        />\n      )}\n      {firstRoundResult && secondRoundResult && (\n        <ThirdRound\n          firstRoundResult={firstRoundResult}\n          secondRoundResult={secondRoundResult}\n          runInWoker={runInWoker}\n          loading={loading}\n          setResult={setThirdRoundResult}\n          setError={setError}\n          result={thirdRoundResult}\n        />\n      )}\n      {loading && (\n        <Loading\n          combinationsCount={combinationsCount}\n          progress={progress}\n          preprogress={preprogress}\n          investmentsCount={investmentsCount}\n          abort={abort}\n        />\n      )}\n      {error && <Failure message={error} />}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}